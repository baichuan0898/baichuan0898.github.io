<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cocoa with Love on Cocoa with Love</title>
    <link>https://www.cocoawithlove.com/</link>
    <description>Recent content on Cocoa with Love</description>
    
    <language>en-us</language>
    <copyright>© 2017 Matt Gallagher. All rights reserved. Code may be used in accordance with license at http://cocoawithlove.com/about</copyright>
    <lastBuildDate>Sat, 20 Jan 2018 15:21:40 +1000</lastBuildDate>
    <atom:link href="https://www.cocoawithlove.com/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Model-View-Controller without the Controller</title>
      <link>https://www.cocoawithlove.com/blog/mvc-without-the-c.html</link>
      <pubDate>Sat, 20 Jan 2018 15:21:40 +1000</pubDate>
      
      <guid>https://www.cocoawithlove.com/blog/mvc-without-the-c.html</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.cocoawithlove.com/blog/a-view-construction-syntax.html&#34;&gt;In the previous article&lt;/a&gt;, I presented a syntax for constructing views in a self-contained expression. The syntax comes from my upcoming CwlViews library, which I hope to release in a few weeks; but in the meantime, I wanted to take a look at the effect this syntax has on the application design pattern.&lt;/p&gt;

&lt;p&gt;View construction syntax might seem like a trivial matter of aesthetics but an app built around the syntax I presented ends up with some dramatic changes: it makes all state changes naturally unidirectional and eliminates the controller role from the application design pattern. Given that controllers are probably the &lt;em&gt;most&lt;/em&gt; prominent aspect of Cocoa app programming, their removal constitutes a substantial change.&lt;/p&gt;

&lt;p&gt;Which raises the question: what do you have left if you remove the Controller from the Cocoa Model-View-Controller pattern?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Book announcement!&lt;/strong&gt; I&amp;rsquo;m writing a book with two other amazing developers, &lt;a href=&#34;https://twitter.com/chriseidhof&#34;&gt;Chris Eidhof&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/floriankugler&#34;&gt;Florian Kugler&lt;/a&gt; from &lt;a href=&#34;https://www.objc.io&#34;&gt;objc.io&lt;/a&gt;, titled &lt;a href=&#34;https://www.objc.io/books/app-architecture/&#34;&gt;&lt;strong&gt;App Architecture&lt;/strong&gt;&lt;/a&gt;. It will cover a range of conventional and experimental application design patterns and architectural techniques – including the application design pattern described in this article. The book is &lt;a href=&#34;https://www.objc.io/books/app-architecture/&#34;&gt;&lt;strong&gt;available now&lt;/strong&gt; in Early Access&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve previously described &amp;ldquo;ideal&amp;rdquo; Model-View-Controller as any implementation where model changes take the path shown in the following diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.cocoawithlove.com/assets/blog/ideal_mvc.svg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;figcaption&gt;Ideal data-flow path in a Model-View-Controller application&lt;/figcaption&gt;

&lt;p&gt;Why do I consider this &amp;ldquo;ideal&amp;rdquo;? I explain the reasons in &lt;a href=&#34;https://www.cocoawithlove.com/blog/worst-possible-application.html&#34;&gt;The worst possible application&lt;/a&gt;; a good application requires a cleanly separately model and view and a cleanly separated model must be passively observed (instead of &amp;ldquo;getting&amp;rdquo; data imperatively) to maintain its abstraction. Invoking actions and passively observing creates this &lt;em&gt;feedback loop&lt;/em&gt; between the view and the model.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;https://www.cocoawithlove.com/blog/view-state-driven-applications.html&#34;&gt;View-state driven applications&lt;/a&gt;, I talked about the benefits of making view-state (not just document state) go through this same loop. Making view-state and document-state go through a loop like this is sometimes called &amp;ldquo;unidirectional data flow&amp;rdquo; because changes go in just one direction (no shortcuts and no doubling back).&lt;/p&gt;

&lt;p&gt;There are multiple frameworks for enforcing unidirectional data flow on other platforms – Elm, Flux, Redux, etc. These usually model their state as a &amp;ldquo;reducer&amp;rdquo;. I&amp;rsquo;ve previously &lt;a href=&#34;https://www.cocoawithlove.com/blog/statements-messages-reducers.html&#34;&gt;talked about reducers&lt;/a&gt; – they&amp;rsquo;re functions that take message inputs, update state and emit notifications. Their key advantage is that they&amp;rsquo;re isolated; they can run in their own execution context, interacting with the rest of the program only via inputs and notifications. Common frameworks for unidirectional data flow tend use use a single change pipeline that invokes all reducers as part of a managed approach to changes.&lt;/p&gt;

&lt;p&gt;My &lt;a href=&#34;https://www.cocoawithlove.com/blog/statements-messages-reducers.html&#34;&gt;View-state driven pattern&lt;/a&gt; (MVC+ViewState) offered a more lightweight approach to unidirectional data flow – deliberately avoiding reliance on any larger framework or global pipeline. Instead, MVC+ViewState added a separate View-state model to the standard MVC pattern and pushed view-state through that model using the same techniques used for the regular model. However, manually maintaining a separate View-state model doubled the observation work and coordinating views dependent on state from both models were clear drawbacks.&lt;/p&gt;

&lt;h2 id=&#34;a-simple-view-controller-in-cocoa-mvc&#34;&gt;A simple view controller in Cocoa MVC&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll come back to the ideas of view-state and unidirectional data flow but first, I want to discuss the role of view controller in a simple Cocoa Model-View-Controller application.&lt;/p&gt;

&lt;p&gt;For this, I&amp;rsquo;ll look at the MVC (non-View-state) version of &lt;a href=&#34;https://www.cocoawithlove.com/blog/view-state-driven-applications.html&#34;&gt;the &amp;ldquo;Clocks&amp;rdquo; app I presented a couple of months ago&lt;/a&gt;. The app has a &amp;ldquo;Select Timezone&amp;rdquo; screen that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.cocoawithlove.com/assets/blog/clocks3.png&#34; alt=&#34;Clocks app MasterViewController&#34; /&gt;&lt;/p&gt;

&lt;figcaption&gt;The &#34;Select Timezone&#34; screen in the Clocks app&lt;/figcaption&gt;

&lt;p&gt;This screen is a basic table view showing plain text rows, backed by a view controller named &lt;code&gt;SelectTimezoneViewController&lt;/code&gt;. The table view is populated by the standard &lt;code&gt;UITableViewDataSource&lt;/code&gt; and &lt;code&gt;UITableViewDelegate&lt;/code&gt; methods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TimeZone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;knownTimeZoneIdentifiers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;numberOfSections&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numberOfRowsInSection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;section&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;count&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IndexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cell&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dequeueReusableCell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withIdentifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;textRow&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;cell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;textLabel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cell&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is about as simple as &lt;code&gt;UITableViewDataSource&lt;/code&gt; and &lt;code&gt;UITableViewDelegate&lt;/code&gt; method implementations can get: a fixed single section is specified, the number of rows for the section comes from the &lt;code&gt;rows&lt;/code&gt; array, a &lt;code&gt;UITableViewCell&lt;/code&gt; with identifier &lt;code&gt;&amp;quot;textRow&amp;quot;&lt;/code&gt; is constructed and the cell&amp;rsquo;s &lt;code&gt;textLabel&lt;/code&gt; is configured with a value from the &lt;code&gt;rows&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;The scene also includes a search field. In the storyboard for this scene, the &lt;code&gt;delegate&lt;/code&gt; of the search field is set to the &lt;code&gt;SelectTimezoneViewController&lt;/code&gt; and the following &lt;code&gt;UISearchBarDelegate&lt;/code&gt; function is called when the search text changes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;searchBar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;searchBar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UISearchBar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;textDidChange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;textDidChange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lowercased&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TimeZone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;knownTimeZoneIdentifiers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;isEmpty&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lowercased&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reloadData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This recreates and filters the timezone identifiers, producing a new &lt;code&gt;rows&lt;/code&gt; array and reloads the table data.&lt;/p&gt;

&lt;p&gt;Finally, since the purpose of the scene is to select timezone identifiers and add timezones to the model, it&amp;rsquo;s necessary to handle row selection:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;didSelectRowAt&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IndexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;indexPath&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indexPathForSelectedRow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;indices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;Document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addTimezone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;presentingViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dismiss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;animated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;completion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When a row is selected, two separate actions occur:&lt;code&gt;addTimezone&lt;/code&gt; is called on the &lt;code&gt;Document&lt;/code&gt; and the entire &amp;ldquo;Select Timezone&amp;rdquo; modal presentation is dismissed.&lt;/p&gt;

&lt;p&gt;All of the code I have shown for the &amp;ldquo;Select Timezone&amp;rdquo; scene is implemented on a single view controller. This is the standard Cocoa MVC approach for this type of scene.&lt;/p&gt;

&lt;h2 id=&#34;implementing-the-same-code-with-cwlviews&#34;&gt;Implementing the same code with CwlViews&lt;/h2&gt;

&lt;p&gt;I now want to look at how this same code would be implemented in CwlViews. The code will need to fulfill the same roles of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define the section and row structure of the table view&lt;/li&gt;
&lt;li&gt;Construct cells from the row data&lt;/li&gt;
&lt;li&gt;When the search text changes, sort and filter the timezone identifiers and refresh the display&lt;/li&gt;
&lt;li&gt;When a row is selected, add the timezone to the document and dismiss the modal presentation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here&amp;rsquo;s the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SelectState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SplitState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;doc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DocumentAdapter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TableView&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tableData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
         &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lowercased&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
         &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TimeZone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;knownTimeZoneIdentifiers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;isEmpty&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lowercased&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;}.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tableData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cellIdentifier&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rowDescription&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;textRowIdentifier&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cellConstructor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cellIdentifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rowData&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;TableViewCell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;textLabel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rowData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;didSelectRow&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multicast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filterMap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rowData&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;doc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;There&amp;rsquo;s no view controller&lt;/strong&gt;. This one code sample includes all the functionality of the previous three Swift code samples but the functionality is implemented by attaching behaviors directly to the table view, itself.&lt;/p&gt;

&lt;p&gt;You can probably see the sorting and filtering of the &lt;code&gt;knownTimeZoneIdentifiers&lt;/code&gt; in the middle of this example – it&amp;rsquo;s largely unchanged from before – but I&amp;rsquo;ll probably need to explain the remaining details.&lt;/p&gt;

&lt;p&gt;Understanding what&amp;rsquo;s happening involves learning about the two key components of CwlViews: &lt;strong&gt;view-binders&lt;/strong&gt; and &lt;strong&gt;model-adapters&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;view-binders&#34;&gt;View-binders&lt;/h2&gt;

&lt;p&gt;This code uses the type names &lt;code&gt;TableView&amp;lt;String&amp;gt;&lt;/code&gt;, &lt;code&gt;TableViewCell&lt;/code&gt; and &lt;code&gt;Label&lt;/code&gt; instead of &lt;code&gt;UITableView&lt;/code&gt;, &lt;code&gt;UITableViewCell&lt;/code&gt; or &lt;code&gt;UILabel&lt;/code&gt;. These type names are the view-binders for their respective views.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;View-binders&lt;/strong&gt; in CwlViews are the constructors of underlying view objects. They fully describe the view through a series of &amp;ldquo;bindings&amp;rdquo; (either constant values, closures or reactive programming signals). You can call &lt;code&gt;instance()&lt;/code&gt; on the view-binder to force construction of the underlying view but in general, this will happen automatically when the view-binder is used by a parent so you don&amp;rsquo;t generally do it yourself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The structure of the table – the sections and rows – are specified by applying the function &lt;code&gt;.tableData()&lt;/code&gt; to the end of the sorted, filtered &lt;code&gt;TimeZone.knownTimeZoneIdentifiers&lt;/code&gt; array transformation. This is a convenience function provided by CwlViews to turn an array into a &lt;code&gt;TableData&amp;lt;RowData&amp;gt;&lt;/code&gt; structure that describes a single-section, static table view. In this case, the &lt;code&gt;RowData&lt;/code&gt; is a &lt;code&gt;String&lt;/code&gt;, since the rows are the string timezone identifiers. The same structure can describe mutable animatable table rows and sections but those features are not needed, here.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.cellIdentifier&lt;/code&gt; and &lt;code&gt;.cellConstructor&lt;/code&gt; closures together specify the same construction of the &lt;code&gt;UITableViewCell&lt;/code&gt; that we performed in &lt;code&gt;tableView(_:,cellForRowAt:)&lt;/code&gt; in the MVC version.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.didSelectRow&lt;/code&gt; binding handles the same work as the &lt;code&gt;tableView(_:,didSelectRowAt:)&lt;/code&gt; from the MVC version. Since this one binding needs to handle two actions (adding the timezone identifier to the model and dismissing the modal selection view controller), a &lt;code&gt;multicast&lt;/code&gt; is used, which splits the single &lt;code&gt;Input&lt;/code&gt; into two: an &lt;code&gt;.add&lt;/code&gt; message sent to the &lt;code&gt;doc&lt;/code&gt; (which will create the new timezone entry in the document) and a &lt;code&gt;nil&lt;/code&gt; message sent to the &lt;code&gt;split.select&lt;/code&gt; variable (the &amp;ldquo;Select Timezone&amp;rdquo; modal presentation is constructed from this view-state variable in the parent split view so setting the variable to &lt;code&gt;nil&lt;/code&gt; implicitly clears the modal presentation).&lt;/p&gt;

&lt;h2 id=&#34;model-adapters&#34;&gt;Model-adapters&lt;/h2&gt;

&lt;p&gt;I want to talk a little about &lt;em&gt;state&lt;/em&gt;. All mutable state in CwlView must be wrapped in what CwlViews calls model-adapters.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Model-adapters&lt;/strong&gt; are a concept that CwlViews provides for handling the &lt;em&gt;model&lt;/em&gt;-end of bindings. A model-adapter is any object that internally wraps and maintains a state value internally – using a reducer – and externally exposes reactive programming inputs and outputs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;aside&#34;&gt;&lt;strong&gt;Compared to view-binders:&lt;/strong&gt; model-adapters expose a bindable interface (so you can attach bindings after construction) whereas view-binders consume bindings on construction (their bindable properties are concealed internally).&lt;/div&gt;

&lt;p&gt;Examples of model-adapters in the &lt;code&gt;tableView&lt;/code&gt; construction example include the &lt;code&gt;DocumentAdapter&lt;/code&gt; and the &lt;code&gt;select.search&lt;/code&gt; and &lt;code&gt;split.select&lt;/code&gt; properties. All properties and parameters in CwlViews are expected to be either immutable or wrapped in a model-adapter so the remaining parameters – the &lt;code&gt;SelectState&lt;/code&gt; and &lt;code&gt;SplitState&lt;/code&gt; objects which contain the &lt;code&gt;search&lt;/code&gt; and &lt;code&gt;select&lt;/code&gt; properties – are immutable model structs (technically, they are emitted from model-adapters higher up in the view-state hierarchy but that&amp;rsquo;s not relevant here).&lt;/p&gt;

&lt;p&gt;This expectation that model-adapters must wrap all mutable state might seem restrictive but it turns out to be entirely pragmatic:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the only possible mutations on a view-binder are through bindings&lt;/li&gt;
&lt;li&gt;bindings on a view-binder need to connect to other objects&lt;/li&gt;
&lt;li&gt;the other objects must expose a bindable interface to work with bindings&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A model-adapter is any stateful object that exposes a bindable interface allowing it to be the &amp;ldquo;other object&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The most important model-adapter to the &amp;ldquo;Select Timezone&amp;rdquo; scene is the &lt;code&gt;select.search&lt;/code&gt; object that represents the contents of the search field. This property is referenced in the &lt;code&gt;tableView&lt;/code&gt; construction code and is an example of the most common kind of model-adapter, the &lt;code&gt;Var&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A &lt;code&gt;Var&lt;/code&gt; is a model-adapter with &amp;ldquo;set&amp;rdquo; semantics – a basic setter where any value you send it replaces the existing value. You can see how this &lt;code&gt;search&lt;/code&gt; property is &amp;ldquo;set&amp;rdquo; by looking at the construction of the &lt;code&gt;SearchBar&lt;/code&gt; for the &amp;ldquo;Select Timezone&amp;rdquo; scene:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;searchBar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SelectState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SearchBarConstructor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SearchBar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;didChange&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;search&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the search bar changes, it emits a value through the &lt;code&gt;.didChange&lt;/code&gt; binding and &lt;code&gt;select.search&lt;/code&gt; is set. If &lt;code&gt;select.search&lt;/code&gt; changes, it will emit a value through its output to the &lt;code&gt;.text&lt;/code&gt; binding, updating the search bar (&lt;code&gt;.didChange&lt;/code&gt; won&amp;rsquo;t be called if the value is unchanged, so this configuration won&amp;rsquo;t cause an infinite loop).&lt;/p&gt;

&lt;h2 id=&#34;feedback-loops-and-unidirectional-data-flow&#34;&gt;Feedback loops and unidirectional data flow&lt;/h2&gt;

&lt;p&gt;The search bar example shows the full view/model feedback loop that I diagrammed at the top of this article: &lt;code&gt;SearchBar.didChange&lt;/code&gt; &amp;rarr; &lt;code&gt;SelectState.search&lt;/code&gt; (input) &amp;rarr; &lt;code&gt;SelectState.search&lt;/code&gt; (output) &amp;rarr; &lt;code&gt;SearchBar.text&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I mentioned briefly in the &lt;a href=&#34;#background&#34;&gt;Background&lt;/a&gt; that having all view outputs go via the model and all view inputs come from the model is sometimes called &amp;ldquo;unidirectional data flow&amp;rdquo;. In Elm/Flux/Redux, this path is enforced by the framework. In the &lt;a href=&#34;https://www.cocoawithlove.com/blog/view-state-driven-applications.html&#34;&gt;MVC+ViewState approach I presented in the Clocks app&lt;/a&gt; it was enforced through manual effort.&lt;/p&gt;

&lt;p&gt;In CwlViews, all view-state is naturally handled on its own very simple, unidirectional view/model feedback loops. It&amp;rsquo;s an emergent effect of the syntax requiring neither framework enforcement nor significant vigilance.&lt;/p&gt;

&lt;h2 id=&#34;controller-or-bindings-does-it-matter&#34;&gt;Controller or bindings, does it matter?&lt;/h2&gt;

&lt;p&gt;So I made a dramatic statement in the introduction that this pattern eliminates the controller – but it doesn&amp;rsquo;t really eliminate the &lt;em&gt;work&lt;/em&gt;, it just moves that work down into bindings on each view. It&amp;rsquo;s reasonable to ask: why does it matter if they&amp;rsquo;re implemented in bindings or if they&amp;rsquo;re implemented in methods on a controller?&lt;/p&gt;

&lt;p&gt;The biggest reason why bindings are an improvement is that bindings don&amp;rsquo;t share state and they can&amp;rsquo;t depend on each other. Bindings can depend on their source-end but they can&amp;rsquo;t depend on anything else. Bindings avoid unwanted interdependence.&lt;/p&gt;

&lt;p&gt;Using regular Cocoa view-controller subclasses without bindings, you can keep behaviors independent – if you&amp;rsquo;re disciplined – but there&amp;rsquo;s no syntax to enforce this or framework help to ensure it, so dependencies and other interference creep in. Non-trivial controllers are typically filled with shared state, manually propagated dependencies and expectations of sequentiality between different actions. In many cases, the size of larger view controllers is enough to create &lt;em&gt;visual&lt;/em&gt; interference between behaviors.&lt;/p&gt;

&lt;p&gt;Interference between behaviors in view controllers causes code complexity to grow in a greater-than-linear way per new behavior. Along with the significant over-assignment of responsibilities to a small number of view controllers in Cocoa MVC, this leads to the problem jokingly called &amp;ldquo;Massive-View-Controller&amp;rdquo; (using the same &amp;ldquo;MVC&amp;rdquo; acronym) where Cocoa view controllers are overloaded with behaviors and each new behavior is increasingly fragile, slowing development and requiring continuous refactoring.&lt;/p&gt;

&lt;h2 id=&#34;scalability-view-models-and-testing&#34;&gt;Scalability, view-models and testing&lt;/h2&gt;

&lt;p&gt;Most MVC alternatives attempt to address controller complexity issues by adding separate roles to the application design pattern that split the controller into multiple smaller objects. CwlViews does almost the &lt;em&gt;opposite&lt;/em&gt; – it eliminates the controller and throws everything into a single large expression.&lt;/p&gt;

&lt;p&gt;At first glance, this might seem ridiculous; how is a single expression more scalable than an entire class? Or cluster of classes?&lt;/p&gt;

&lt;p&gt;The truth is that the CwlViews approach isn&amp;rsquo;t about forcing everything into a single expression. The point about declarative expressions like CwlViews&amp;rsquo; construction is that it is easily &lt;em&gt;decomposable&lt;/em&gt;. You can build your view-binders however you choose and break functionality out into its own function as it grows.&lt;/p&gt;

&lt;p&gt;In fact, the &lt;code&gt;tableView&lt;/code&gt; and &lt;code&gt;searchBar&lt;/code&gt; functions I&amp;rsquo;ve already shown are themselves broken out of the construction of the overall scene because I think it looks better to keep the construction of components separate from the layout of those components:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;View&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;barTint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vertical&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;navBar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;searchBar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fillRemaining&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;doc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;This code sample does reveal something else: the &lt;code&gt;ViewController&lt;/code&gt; is not totally &lt;em&gt;gone&lt;/em&gt; in CwlViews. &lt;code&gt;ViewController&lt;/code&gt;s are still used for their role in swapping in and out sections of the view-tree. However, they don&amp;rsquo;t have many other responsibilities. Notice that the only binding used here for the &lt;code&gt;ViewController&lt;/code&gt; is to specify its child &lt;code&gt;.view&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&amp;rsquo;s not just child views that you can easily move out of the construction syntax to their own locations. Imagine that you decided the &lt;code&gt;.tableData&lt;/code&gt; binding transformation that I showed previously during the &lt;code&gt;TableView&lt;/code&gt; construction:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tableData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lowercased&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;TimeZone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;knownTimeZoneIdentifiers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;isEmpty&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lowercased&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tableData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;was growing too large.&lt;/p&gt;

&lt;p&gt;The decomposeable nature of CwlViews&amp;rsquo; declarative syntax means that it is trivial to pull this code out and put it somewhere else. The most natural place to move a transformation like this is into a &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;func&lt;/code&gt; on the model-adapters whose properties the transformation processes.&lt;/p&gt;

&lt;p&gt;For example, you could move this transformation into a &lt;code&gt;var&lt;/code&gt; on the &lt;code&gt;SelectState&lt;/code&gt; view-state adapter where the &lt;code&gt;search&lt;/code&gt; property resides:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tableData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TableData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
      &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lowercased&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;TimeZone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;knownTimeZoneIdentifiers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;isEmpty&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lowercased&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tableData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this property in-place, the code at the binding location is reduced to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tableData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tableData&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you add this type of transformation to the view-state adapter, the effect starts to get very similar to a &lt;strong&gt;presentation model&lt;/strong&gt;, also known as &lt;strong&gt;view-model&lt;/strong&gt; (a representation of state from the model, combined with partial state from the view that encodes the presentation and interaction logic of the view). You can also move these transformations to the main document adapter. In that scenario, these transformations start to look like &lt;strong&gt;use-cases&lt;/strong&gt; (specialized slices of the model as needed by views within the app).&lt;/p&gt;

&lt;p&gt;By lifting transformation logic out of the view-binder and up into model-adapters, you can make specialized versions that further transform more general versions so that the appropriate level of abstraction and transformation is provided and the whole architecture scales as needed.&lt;/p&gt;

&lt;p&gt;The question is: should all transformations be lifted out to form a complete presentation-model in all cases? The Model-View-ViewModel pattern suggests this approach because the presentation-model can be used as a testable interface for testing the logic and state of the entire view.&lt;/p&gt;

&lt;p&gt;While you could do this in CwlViews if you wanted, the reality is that a manually created presentation-model isn&amp;rsquo;t necessary for testing because the view-binder already makes it possible to access the presentation and interaction logic.&lt;/p&gt;

&lt;p&gt;For example, if we wanted to test that the correct &lt;code&gt;.cellIdentifier&lt;/code&gt; binding was used in the table view returned from our &lt;code&gt;tableView&lt;/code&gt; construction function, we could write the following test:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testTableViewCellIdentifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// Create the inputs&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SelectState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SplitState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;doc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DocumentAdapter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
   
   &lt;span class=&#34;c1&#34;&gt;// Call our tableView function to create the view-binder then extract the bindings&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bindings&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;doc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;consumeBindings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
   
   &lt;span class=&#34;c1&#34;&gt;// Select the binding we want&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TableRowDescription&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?)?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bindings&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cellIdentifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;
         &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   
   &lt;span class=&#34;c1&#34;&gt;// Test the result&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TableRowDescription&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IndexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rowData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;XCTAssert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;textRow&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I should probably build some helper functions to simplify this type of scenrio a little but the premise is clear: you can ask a view-binder for its bindings and test them in the same way that you would test the observable properties of a view-model.&lt;/p&gt;

&lt;h2 id=&#34;what-s-the-result&#34;&gt;What&amp;rsquo;s the result?&lt;/h2&gt;

&lt;p&gt;Getting back to the initial question I posed: what do you have left if you remove the Controller from the Cocoa Model-View-Controller pattern?&lt;/p&gt;

&lt;p&gt;Taken literally, the simplest name would be Model-View – and it wouldn&amp;rsquo;t be &lt;em&gt;wrong&lt;/em&gt; since everything except the bindings in this approach is either a model-layer object or a view-layer object. But I have spent too many years writing in MFC&amp;rsquo;s Document-View, which sounds a lot like Model-View and whose defining aspect is that the whole program is coordinated from the window&amp;rsquo;s message queue. I hardly want to court comparison with that.&lt;/p&gt;

&lt;p&gt;With &amp;ldquo;bindings&amp;rdquo; forming such a significant part of this pattern – largely replacing the Controller from Model-View-Controller – it would be natural to describe this pattern as Model-View-Bindings but unfortunately, Model-View-Binder is already a synonym for Model-View-ViewModel on some platforms. Probably better to avoid confusion.&lt;/p&gt;

&lt;p&gt;Ultimately, since I&amp;rsquo;ve taken to describing the pattern with the following diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.cocoawithlove.com/assets/blog/mavb.svg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;figcaption&gt;The CwlViews application design pattern&lt;/figcaption&gt;

&lt;p&gt;I&amp;rsquo;ve been calling the pattern ModelAdapter-ViewBinder (MAVB).&lt;/p&gt;

&lt;p&gt;Yeah, it&amp;rsquo;s a bit of a word-salad but I persuaded my co-authors &lt;a href=&#34;https://www.objc.io/books/app-architecture/&#34;&gt;Application Architecture&lt;/a&gt; to let me put this crazy idea into the book (because I&amp;rsquo;ve been having so much fun with it), so I figured I should give it a name.&lt;/p&gt;

&lt;h2 id=&#34;view-the-code&#34;&gt;View the code&lt;/h2&gt;

&lt;p&gt;You can view the &lt;a href=&#34;https://github.com/mattgallagher/Clocks/blob/undoredo/Clocks/SelectTimezoneViewController.swift?ts=3&#34;&gt;original MVC version of the &amp;ldquo;SelectTimezoneViewController.swift&amp;rdquo; file&lt;/a&gt; on the &lt;a href=&#34;https://github.com/mattgallagher/Clocks/tree/undoredo&#34;&gt;undoredo branch of the Clocks repository&lt;/a&gt; on github. It&amp;rsquo;s received some touch-ups since I released the code in November but most of the project is unchanged.&lt;/p&gt;

&lt;p&gt;You can also view the &lt;a href=&#34;https://github.com/mattgallagher/Clocks/blob/cwlviews/Clocks/SelectView.swift?ts=3&#34;&gt;CwlViews version of the &amp;ldquo;SelectView.swift&amp;rdquo; file&lt;/a&gt; on the &lt;a href=&#34;https://github.com/mattgallagher/Clocks/tree/cwlviews&#34;&gt;cwlviews branch of the Clocks repository&lt;/a&gt; on github.&lt;/p&gt;

&lt;p&gt;The CwlViews version is a complete project, showing much more of CwlViews than I&amp;rsquo;ve revealed here. It also fully implements user-interface time-travel, like the View-state driven &amp;ldquo;master&amp;rdquo; branch.&lt;/p&gt;

&lt;p&gt;But at the moment, the CwlViews version won&amp;rsquo;t actually build. It will give errors similar to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;error: failed to clone; Cloning into bare repository &#39;/Users/matt/Library/Developer/Xcode/DerivedData/Clocks-euhvzfgwykqqnrblysttdbspzjie/Build/Intermediates.noindex/repositories/CwlViews.git-1609764927845648232&#39;...
remote: Repository not found.
fatal: repository &#39;https://github.com/mattgallagher/CwlViews.git/&#39; not found
error: swift package resolve failed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;because there is no repository at &lt;a href=&#34;https://github.com/mattgallagher/CwlViews.git&#34;&gt;https://github.com/mattgallagher/CwlViews.git&lt;/a&gt; yet.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m still working on some final details before I release it publicly in a few weeks. Assuming I have the details right then this Clocks version will build correctly once I push CwlViews to github.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I started CwlViews by looking for a better view construction syntax. It&amp;rsquo;s interesting how a change to something as seemingly superficial as syntax has deep effects on the overall structure of a Cocoa application.&lt;/p&gt;

&lt;p&gt;The controller layer – the most prominent layer of Cocoa&amp;rsquo;s Model-View-Controller pattern – is eliminated as an architectural component and reduced to a trivial member of the view layer. The behaviors previously implemented on the view controller are moved into bindings on the views themselves.&lt;/p&gt;

&lt;p&gt;Even this change is not a mere rearrangement. Moving behaviors into bindings keeps them independent, helping complexity to scale linearly with each additional behavior, instead of the greater-than-linear complexity scaling in typical view controllers. Additionally, the overall construction is arbitrarily decomposable as needed.&lt;/p&gt;

&lt;p&gt;The architecture is naturally unidirectional. This happens without a global driver to keep the application on a single pipeline or any need for constant discipline. It happens naturally since you need to give view-bindings both a view-end and a model-end.&lt;/p&gt;

&lt;p&gt;Under all of this: the underlying view objects and underlying model objects are unchanged. It&amp;rsquo;s all still standard Cocoa views and the model object is unchanged, it&amp;rsquo;s just the construction and wrapping that have changed.&lt;/p&gt;

&lt;h3 id=&#34;looking-forward&#34;&gt;Looking forward&amp;hellip;&lt;/h3&gt;

&lt;p&gt;I should probably just release CwlViews already.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Self promotion? On my own blog?!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The ModelAdapter-ViewBinder pattern, along with other experimental and conventional patterns and architectural techniques, are examined in depth in a book I&amp;rsquo;m writing, with &lt;a href=&#34;https://twitter.com/chriseidhof&#34;&gt;Chris Eidhof&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/floriankugler&#34;&gt;Florian Kugler&lt;/a&gt; from &lt;a href=&#34;https://www.objc.io&#34;&gt;objc.io&lt;/a&gt;, titled &lt;a href=&#34;https://www.objc.io/books/app-architecture/&#34;&gt;App Architecture&lt;/a&gt; (iOS Application Patterns in Swift).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.objc.io/books/app-architecture/&#34;&gt;&lt;img src=&#34;https://www.cocoawithlove.com/assets/blog/app_architecture.png&#34; alt=&#34;App Architecture&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.objc.io/books/app-architecture/&#34;&gt;You can &lt;strong&gt;order now&lt;/strong&gt; in Early Access to get the first chapter immediately and subsequent chapters as they&amp;rsquo;re released&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;Copyright Matt Gallagher, 2018. All rights reserved. Code samples may be use in accordance with the ISC-style license at https://www.cocoawithlove.com/about.html</description>
    </item>
    
    <item>
      <title>A view construction syntax</title>
      <link>https://www.cocoawithlove.com/blog/a-view-construction-syntax.html</link>
      <pubDate>Fri, 15 Dec 2017 22:35:03 +1000</pubDate>
      
      <guid>https://www.cocoawithlove.com/blog/a-view-construction-syntax.html</guid>
      <description>

&lt;p&gt;In this article, I&amp;rsquo;m going to look at constructing Cocoa views in code.&lt;/p&gt;

&lt;p&gt;On its own, that&amp;rsquo;s not a particularly daring idea but I&amp;rsquo;m going to use a unique syntax to aid the process:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enabled&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code trades conventional &lt;code&gt;parameter: value&lt;/code&gt; syntax for a custom &lt;code&gt;.parameter -- value&lt;/code&gt; syntax and uses this change to offer a few advantages: dynamic and constant options with no syntactic overhead, support for parameters inherited through the class hierarchy, support for large numbers of optional parameters without needing to push unused parameters onto the stack, avoidance of parentheses, and avoiding the need to specify types – all while remaining completely typesafe.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll be looking at how this syntax is implemented and the various tricks it uses to make the Swift type system do all the menial work.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This article is a sneak peek at one of the key ideas in an upcoming library named CwlViews that should be available soon. A &lt;a href=&#34;https://github.com/mattgallagher/CocoaWithLovePlaygrounds&#34;&gt;ViewConstruction.playground is available right now&lt;/a&gt;, so you can play with the examples presented in this article.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;aim&#34;&gt;Aim&lt;/h2&gt;

&lt;p&gt;In an app wireframe (a rough layout of a user-interface provided by the graphic artist or user-experience designer), a &lt;code&gt;UITextField&lt;/code&gt; might be appear as a simple box. The wireframe usually gives (or implies) the layout constraints required for the text field but otherwise might not offer any information about the &lt;em&gt;behaviors&lt;/em&gt; of the text field.&lt;/p&gt;

&lt;p&gt;When implementing user interfaces, before I start coding, I normally go through the wireframes and break down each element of the user interface with descriptions that look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nameField: UITextField
   - borderStyle: `.roundRect`
   - isEnabled:
      `true` if `personViewState.isEditing` is `true`, otherwise `false`
   - backgroundColor:
      `.white` while `personViewState.isEditing` is `true`, otherwise `.lightGray`
   - text:
      - `name` value of `Person` object in `Document` where `id`==`personViewState.id`
   - on UITextFieldDidChange:
      - set `name` value of `Person` object in `Document` where
        `id`==`personViewState.id` to the value of `text`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I write this type of description because it&amp;rsquo;s how I mentally consider the properties of the view. It&amp;rsquo;s really just a list of view properties and the behaviors I want them to have. Structurally, it resembles a property list, similar to YAML or other text-based property formats. The precise syntax involved isn&amp;rsquo;t as important as the relatively simple structure.&lt;/p&gt;

&lt;p&gt;Ideally, I would like my view construction code to look as close to this description as possible.&lt;/p&gt;

&lt;p&gt;As we&amp;rsquo;ll see though, typical Cocoa view construction code looks &lt;em&gt;nothing&lt;/em&gt; like this.&lt;/p&gt;

&lt;h2 id=&#34;interface-builder&#34;&gt;Interface Builder?&lt;/h2&gt;

&lt;p&gt;This article is about building views in code. It&amp;rsquo;s worth briefly discussing &lt;em&gt;why&lt;/em&gt; we would construct in Swift code, given that Apple promote construction via Interface Builder as a first choice.&lt;/p&gt;

&lt;p&gt;The original idea behind Interface Builder was to offer a &amp;ldquo;what-you-see-is-what-you-get&amp;rdquo; editor for pixel-based layout of fixed sized windows and dialogs. The original Interface Builder ran the program, live – so it actually was WYSIWYG – and fixed size windows were the norm. None of this has been true for years.&lt;/p&gt;

&lt;p&gt;Instead, the common uses for Interface Builder are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;configuring auto-layout constraints&lt;/li&gt;
&lt;li&gt;setting values for &lt;em&gt;some&lt;/em&gt; (but not all) constant properties in Interface Builder&lt;/li&gt;
&lt;li&gt;defining segues&lt;/li&gt;
&lt;li&gt;supporting Storyboard-based view-state restoration&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For a range of reasons though, none of these are valuable to me.&lt;/p&gt;

&lt;p&gt;On the first point: I find using specifying individual constraints in Interface Builder is laborious and frustrating. As I mentioned in &lt;a href=&#34;https://www.cocoawithlove.com/blog/cwllayout.html&#34;&gt;CwlLayout: a Swift wrapper around Auto Layout&lt;/a&gt;, I prefer to specify layout by &lt;em&gt;intent&lt;/em&gt; and let the framework handle specific constraints (as with &lt;code&gt;UIStackView&lt;/code&gt; or my own CwlLayout).&lt;/p&gt;

&lt;p&gt;On the second point: the difficult properties to handle are the &lt;em&gt;dynamic&lt;/em&gt; properties but Interface Builder helps only with constant properties. Even with constant properties, as my apps grow, I usually end up with pre-prepared sets of properties – &amp;ldquo;Styles&amp;rdquo; – for the views in my app and you can&amp;rsquo;t really do this in Interface Builder, either.&lt;/p&gt;

&lt;p&gt;On the third point: I &lt;em&gt;strongly&lt;/em&gt; dislike how data is propagated during segues, requiring cooperation between  &lt;code&gt;perform(segue:)&lt;/code&gt; and &lt;code&gt;prepare(for:)&lt;/code&gt; and needing one &lt;code&gt;UIViewController&lt;/code&gt; to push key data to another &lt;code&gt;UIViewController&lt;/code&gt; &lt;em&gt;after&lt;/em&gt; construction. This might seem like empty complaining but with data dependencies and data propagation being the single most important pipeline in an application, actively promoting bad practices like cooperative coupling and side-effects is a show stopping issue. Accordingly, I tend not to use segues, in favor of manual &lt;code&gt;UIViewController&lt;/code&gt; construction and transitions.&lt;/p&gt;

&lt;p&gt;On the fourth point: if you use a persistent view-state approach, like the &lt;a href=&#34;https://www.cocoawithlove.com/blog/view-state-driven-applications.html&#34;&gt;Model-View-Controller + ViewState approach I showed in the previous article&lt;/a&gt;, state restoration is already a part of the process, without needing Storyboards or restoration identifiers. So I don&amp;rsquo;t use Storyboard state restoration.&lt;/p&gt;

&lt;p&gt;Like most long-term Cocoa programmers, I&amp;rsquo;ve gone back-and-forth about how much or little to use Interface Builder in my projects. Interface Builder has always been a core component of Cocoa development, as it was a core component of NeXTStep and &lt;a href=&#34;https://vimeo.com/62618532&#34;&gt;ExperLISP before that&lt;/a&gt;. Writing Cocoa &amp;ldquo;properly&amp;rdquo; has generally involved using Interface Builder in some capacity.&lt;/p&gt;

&lt;p&gt;For the last few years though, the only argument in favor of Interface Builder has been that constructing Cocoa views in Objective-C/Swift is ugly. It&amp;rsquo;s not technically difficult to construct one or two views in code but the construction involves multiple statements without any obvious structure and as you add more views, the lack of structure leads to messy, hard to read code.&lt;/p&gt;

&lt;p&gt;The purpose of this article is to talk about the process I&amp;rsquo;ve gone through, trying to building views in Swift code using a clear, structured syntax so it might be a manageable alternative to Interface Builder.&lt;/p&gt;

&lt;h2 id=&#34;construction-in-normal-cocoa-code&#34;&gt;Construction in normal Cocoa code&lt;/h2&gt;

&lt;p&gt;Nearly every view can be default constructed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s a zero sized view with no contents and a transparent background – not that you&amp;rsquo;d notice at this point, since it&amp;rsquo;s a zero sized view.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s set some simple values on this text field so that we can see it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;nameField&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CGRect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;nameField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;someTextValue&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;nameField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEnabled&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;nameField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;white&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Immediately, you can see an inconsistency: some properties can be set through the constructor (in the case of a &lt;code&gt;UITextField&lt;/code&gt;, the &lt;code&gt;frame&lt;/code&gt;) but most properties require separate steps.&lt;/p&gt;

&lt;p&gt;The fact that the &lt;code&gt;frame&lt;/code&gt; can be set in the &lt;code&gt;UIView&lt;/code&gt; constructor might make this property appear important but its presence is an anachronism. In an auto-layout world, setting the &lt;code&gt;frame&lt;/code&gt; is completely useless – layout constraints will totally override any value we set here. We might as well stick with the default constructor.&lt;/p&gt;

&lt;p&gt;Setting the other properties isn&amp;rsquo;t much more helpful. In my description of the &lt;code&gt;UITextField&lt;/code&gt;, all of these properties are supposed to be &lt;em&gt;dynamic&lt;/em&gt; which means that they have a data dependency on another value elsewhere in the program. Setting them here in isolation – without a connection to their data dependency – is dangerous; it can make them look as though they&amp;rsquo;ve been correctly configured when they are not.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s far better to handle dynamic properties when we set up our connection to the data dependency. We should use some form of observing that guarantees to immediately provide the initial value. In the previous article, I used an &lt;code&gt;addObserver&lt;/code&gt; wrapper around &lt;code&gt;NotificationCenter.addObserver&lt;/code&gt;  that guaranteed this.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s properly construct the &lt;code&gt;UITextField&lt;/code&gt; with all of the requirements specified in my text description in the &amp;ldquo;Aim&amp;rdquo; section.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;nameField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;personViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PersonViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;observations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NSObjectProtocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loadView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
   &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nameField&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;

   &lt;span class=&#34;c1&#34;&gt;// Constant properties&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;borderStyle&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roundedRect&lt;/span&gt;
   
   &lt;span class=&#34;c1&#34;&gt;// Dynamic properties&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;observations&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addObserver&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;weak&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;guard&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personViewState&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personViewState&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nameField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEnabled&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEditing&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nameField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEditing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;white&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lightGray&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
         &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;forId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updatePerson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;observations&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addObserver&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;weak&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;document&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;guard&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
         &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;forId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updatePerson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

   &lt;span class=&#34;c1&#34;&gt;// Actions&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NotificationCenter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addObserver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;forName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UITextFieldDidChange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;weak&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;guard&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
         &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pvs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personViewState&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;Document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;forPersonId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pvs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;observations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;updatePerson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;nameField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ouch! That&amp;rsquo;s gigantic! What happened?&lt;/p&gt;

&lt;p&gt;Even &lt;em&gt;with&lt;/em&gt; a wrapper around &lt;code&gt;NotificationCenter.addObserver&lt;/code&gt; to make it more syntactically efficient, my eleven line text description has turned into 30+ lines of multi-structured, visually complex code. The actual properties we&amp;rsquo;re manipulating are lost in the middle somewhere.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a number of reasons why the code is verbose and complex. The biggest problems are the cross dependency between the &lt;code&gt;Person&lt;/code&gt; model object and the &lt;code&gt;PersonViewState&lt;/code&gt; (because we want to observe the &lt;code&gt;Person&lt;/code&gt; identified by the &lt;code&gt;id&lt;/code&gt; on the view&amp;rsquo;s &lt;code&gt;PersonViewState&lt;/code&gt;), the clumsy need to observe the &lt;code&gt;.UITextFieldDidChange&lt;/code&gt; notification to get the text changes and the continual need to use &lt;code&gt;weak self&lt;/code&gt; and other quirks associated with callbacks from a child object needing to access data and methods on the parent view controller.&lt;/p&gt;

&lt;h2 id=&#34;reactive-programming&#34;&gt;Reactive programming&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cocoawithlove.com/blog/reactive-programming-what-and-why.html&#34;&gt;I&amp;rsquo;ve previously shown how reactive programming can be used to simplify observing code&lt;/a&gt;. By taking advantage of the &lt;code&gt;flatMapLatest&lt;/code&gt; operator (which starts a new observation when its input changes) and some other mapping and combining functions, we can dramatically simplify these dependent observations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Cancellable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;constructTextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
   &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nameField&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;
   
   &lt;span class=&#34;c1&#34;&gt;// Constant properties&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;borderStyle&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roundedRect&lt;/span&gt;
   
   &lt;span class=&#34;c1&#34;&gt;// Dynamic properties&lt;/span&gt;
   &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endpoints&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;subscribeValues&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEnabled&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEditing&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEditing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;white&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lightGray&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endpoints&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flatMapLatest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signalForPerson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;subscribeValues&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   
   &lt;span class=&#34;c1&#34;&gt;// Actions&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;signalFromNotifications&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UITextFielddidChange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filterMap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;triggerCombine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trigger&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is much better: half the size of the previous example and eliminating some of the quirks like the need for &lt;code&gt;weak self&lt;/code&gt; in the observing closures. Most importantly for clarity and maintenance: with the data dependencies combined cleanly, each &lt;code&gt;UITextField&lt;/code&gt; property is updated on just a single path.&lt;/p&gt;

&lt;p&gt;But it&amp;rsquo;s still 5 separate statements to properly define a single &lt;code&gt;UITextField&lt;/code&gt; and you need to look closely to see that this code exists to configure the &lt;code&gt;nameField&lt;/code&gt; since the references to this view are buried deep inside the &lt;code&gt;subscribeValues&lt;/code&gt; closures.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also pretty strange to require an &lt;code&gt;endpoints&lt;/code&gt; property (for maintaining the lifetime of the &lt;code&gt;subscribeValues&lt;/code&gt; observing) on the &lt;code&gt;UIViewController&lt;/code&gt;. This effectively makes the &lt;code&gt;UIViewController&lt;/code&gt;, not the &lt;code&gt;UITextField&lt;/code&gt;, the observer of the changes. It would be better if the &lt;code&gt;UITextField&lt;/code&gt; were the owner of its own reactive lifetimes.&lt;/p&gt;

&lt;p&gt;Extending &lt;code&gt;UITextField&lt;/code&gt; so that it exposes a signal input and output for each settable property and observable action – a common approach in reactive programming frameworks like ReactiveCocoa or RxCocoa – would eliminate another line or two but wouldn&amp;rsquo;t otherwise improve the structure of the code: it would still require &lt;code&gt;disposables&lt;/code&gt; to be held by the &lt;code&gt;UIViewController&lt;/code&gt;, would still require a handful of separate statements to fully describe a single view and would still hide the affected view and properties deep inside larger expressions.&lt;/p&gt;

&lt;p&gt;I want everything to be a single, self-contained expression where the &lt;code&gt;UITextField&lt;/code&gt; manages its own behaviors, rather than requiring another object to facilitate.&lt;/p&gt;

&lt;h2 id=&#34;everything-in-a-single-expression&#34;&gt;Everything in a single expression&lt;/h2&gt;

&lt;p&gt;For a moment, let&amp;rsquo;s set aside the difficulties of dynamic properties and output actions. We&amp;rsquo;ll come back to them later.&lt;/p&gt;

&lt;p&gt;It is very simple to write a &lt;em&gt;specialized&lt;/em&gt; constructor to configure the &lt;code&gt;UITextField&lt;/code&gt; properties that we care about in a single expression:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;borderStyle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roundedRect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;someTextValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;isEnabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;white&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;textChanged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;someSignalInput&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The real question is: can we use this approach to solve the &lt;em&gt;general&lt;/em&gt; case, not just a specialized case?&lt;/p&gt;

&lt;p&gt;We could write an &lt;code&gt;init&lt;/code&gt; function that had parameters for &lt;em&gt;every&lt;/em&gt; possible property and offered default values for each parameter, so we could specify only those parameters for which we want non-default values. For a basic &lt;code&gt;UIView&lt;/code&gt; – considering only those properties on &lt;code&gt;UIView&lt;/code&gt; itself – there&amp;rsquo;s about 25 properties that you might want to set on construction.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how an &lt;code&gt;init&lt;/code&gt; function with all of these parameters might look:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UIView&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;alpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CGFloat&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;clearsContextBeforeDrawing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;clipsToBounds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;contentMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIViewContentMode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;center&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;exclusiveTouch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;gestureRecognizers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UIGestureRecognizer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;horizontalContentCompressionResistancePriority&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UILayoutPriority&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;defaultHigh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;horizontalContentHuggingPriority&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UILayoutPriority&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defaultLow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;layoutMargins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIEdgeInsets&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIEdgeInsets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bottom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;mask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;motionEffects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UIMotionEffect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;multipleTouchEnabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;opaque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;preservesSuperviewLayoutMargins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;restorationIdentifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;semanticContentAttribute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UISemanticContentAttribute&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unspecified&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;tintAdjustmentMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIViewTintAdjustmentMode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;automatic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;tintColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIColor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;white&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;userInteractionEnabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;verticalContentCompressionResistancePriority&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UILayoutPriority&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defaultHigh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;verticalContentHuggingPriority&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UILayoutPriority&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defaultLow&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* ... */&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The autocomplete feature in Xcode starts to get a little weird with this many defaulted parameters. Autocomplete issues might seem like a minor inconvenience but since the entire &lt;em&gt;purpose&lt;/em&gt; of this construction code is supposed to be convenience, it merits consideration.&lt;/p&gt;

&lt;p&gt;Another inconvenience is that Swift requires parameters be provided in-order. For long lists of properties, you&amp;rsquo;d probably need to carefully keep things in alphabetical order to make it work - which is a hassle since properties like these are not inherently an ordered concept.&lt;/p&gt;

&lt;p&gt;This approach really becomes strained when we look at inheritance hierarchies. There&amp;rsquo;s as many as 30 properties you might set on a &lt;code&gt;UITextField&lt;/code&gt;, plus 6 on &lt;code&gt;UIControl&lt;/code&gt; plus the 25 on &lt;code&gt;UIView&lt;/code&gt;. That&amp;rsquo;s over &lt;em&gt;60 parameters&lt;/em&gt; before we&amp;rsquo;ve included actions, delegates and oddities like how to handle mutability, all of which would likely increase (and in the case of mutability &lt;em&gt;multiply&lt;/em&gt;) the number of parameters required.&lt;/p&gt;

&lt;p&gt;Now, Swift itself doesn&amp;rsquo;t really mind if you pass hundreds or even thousands of defaulted parameters to a function. I generated a function with 10,000 parameters while writing this article and it appeared to work without issue.&lt;/p&gt;

&lt;p&gt;The real problem with huge numbers of parameters is in &lt;em&gt;maintaining&lt;/em&gt; all the constructors across multiple levels of subclass. If every &lt;code&gt;UIView&lt;/code&gt; subclass has a constructor that needs to repeat every &lt;code&gt;UIView&lt;/code&gt; property then every time &lt;code&gt;UIView&lt;/code&gt; changes its set of properties, all &lt;code&gt;UIView&lt;/code&gt; subclass constructors would need to be updated. This is completely unreasonable.&lt;/p&gt;

&lt;h2 id=&#34;enum-cases-as-parameter-names&#34;&gt;Enum cases as parameter names&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s try a different approach. In my previous article, &lt;a href=&#34;https://www.cocoawithlove.com/blog/cwllayout.html&#34;&gt;CwlLayout: a Swift wrapper around Auto Layout&lt;/a&gt;, I showed a syntax where the parameters to a function were a variable argument list of &lt;code&gt;enum&lt;/code&gt; cases. Here&amp;rsquo;s how it looked:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;Layout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;horizontal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sizedView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lengthEqualTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ratio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.75&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;space&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can use a similar approach here by creating an &lt;code&gt;enum&lt;/code&gt; with all the properties from &lt;code&gt;UIView&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ViewBinding&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CGFloat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UIColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clearsContextBeforeDrawing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// ... and so on&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then we can write an &lt;code&gt;init&lt;/code&gt; function that accepts a variable number of these arguments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UIView&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bindings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and construct &lt;code&gt;UIView&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;UIView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;white&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This looks like it might be more promising. Parameters don&amp;rsquo;t need to be provided in-order, it&amp;rsquo;s not going to have the autocomplete problems in Xcode and it&amp;rsquo;s not going to put hundreds of parameters onto the stack each time.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s the slight weirdness that you could inadvertently provide two instances of the same parameter, e.g.:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;UIView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;white&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;blue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There shouldn&amp;rsquo;t be any valid reason to do this but it isn&amp;rsquo;t any worse than setting the same property twice in code – a waste of time but not a show stopping scenario.&lt;/p&gt;

&lt;p&gt;A bigger problem is that there&amp;rsquo;s no solution here for inheritance. If we had to exhaustively enumerate all &lt;code&gt;UIView&lt;/code&gt; properties in each &lt;code&gt;UIView&lt;/code&gt; subclass, then a change to &lt;code&gt;UIView&lt;/code&gt; would still break every &lt;code&gt;UIView&lt;/code&gt; subclass.&lt;/p&gt;

&lt;h2 id=&#34;enums-with-inheritance&#34;&gt;Enums with inheritance&lt;/h2&gt;

&lt;p&gt;We could wrap the parameters of the inherited class in an &lt;code&gt;inheritedBinding&lt;/code&gt; case:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TextFieldBinding&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inheritedBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ControlBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// other UITextField properties&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ControlBinding&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inheritedBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ViewBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// other UIControl properties&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ViewBinding&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CGFloat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UIColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clearsContextBeforeDrawing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// ... and so on&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We could use this to create an &lt;code&gt;init&lt;/code&gt; method on &lt;code&gt;UITextField&lt;/code&gt; capable of this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;someTextValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inheritedBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inheritedBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inheritedBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;white&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Technically &lt;em&gt;works&lt;/em&gt; but it&amp;rsquo;s starting to get a little goofy. Needing to remember the correct inheritance level and correctly specify it is annoying and the real information on each line is starting to get a little lost in layers of wrapping.&lt;/p&gt;

&lt;p&gt;Fortunately, Swift has the ability to look up &lt;code&gt;static&lt;/code&gt; members using the dot operator so we could simplify this slightly by adding a &lt;code&gt;static&lt;/code&gt; function on &lt;code&gt;TextFieldBinding&lt;/code&gt; that shortcuts to any subclass:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TextFieldBinding&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;controlBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Binding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ControlBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TextFieldBinding&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inheritedBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;param&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;viewBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Binding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TextFieldBinding&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inheritedBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inheritedBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;param&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and we could rewrite the initialization as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;textFieldBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;someTextValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;controlBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEnabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;viewBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;white&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;.textFieldBinding&lt;/code&gt; wrapper isn&amp;rsquo;t required here but I&amp;rsquo;ve included for consistency.&lt;/p&gt;

&lt;p&gt;This does address the problems of inheritance and large numbers of defaulted parameters but the aesthetics are certainly not ideal. The property name that we&amp;rsquo;re trying to set is buried in the &lt;em&gt;middle&lt;/em&gt; of each line and there&amp;rsquo;s two layers of parentheses required to wrap the contents.&lt;/p&gt;

&lt;p&gt;And I&amp;rsquo;ve been omitting the most important part: these parameters are constant and I want a solution that handles &lt;em&gt;dynamic&lt;/em&gt; parameters.&lt;/p&gt;

&lt;h2 id=&#34;dynamic-values&#34;&gt;Dynamic values&lt;/h2&gt;

&lt;p&gt;We need to be able to satisfy any property with a &lt;em&gt;dynamic value&lt;/em&gt; – a property that gets its value from a dynamic source, like a reactive programming signal. Of course, just because a property &lt;em&gt;can&lt;/em&gt; be dynamic, doesn&amp;rsquo;t mean it &lt;em&gt;must&lt;/em&gt; be dynamic. This means that we need to be able to set any dynamic property in two different ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Constant (e.g. a value like &lt;code&gt;.white&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Dynamic (e.g. a signal like &lt;code&gt;signal.map { $0.isEditing ? .white : .lightGray }&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To handle these two scenarios, the associated values in our Binding &lt;code&gt;enum&lt;/code&gt; values will no longer be simple types (like &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;UIColor&lt;/code&gt; or &lt;code&gt;Bool&lt;/code&gt;) and will instead be wrapped in &lt;code&gt;DynamicValue&lt;/code&gt; so we can provide &lt;code&gt;.constant&lt;/code&gt; or &lt;code&gt;.dynamic&lt;/code&gt; versions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DynamicValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;dynamic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our construction might then become:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;textFieldBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;dynamic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flatMapLatest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signalForPerson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;))),&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;controlBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;dynamic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEditing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;))),&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;viewBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;dynamic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEditing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;white&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lightGray&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;UITextField&lt;/code&gt; owns the endpoints that keep the bindings alive. These endpoints are stored with the object itself using &lt;code&gt;objc_setAssociatedObject&lt;/code&gt;. Since bindings must be created on construction – they cannot be added later – we can do this efficiently and set an associated storage only if the object has dynamic bindings that need to be retained.&lt;/p&gt;

&lt;p&gt;Conceptually, this is what I want but it looks really clumsy and we&amp;rsquo;re approaching a LISP-level of parentheses.&lt;/p&gt;

&lt;h2 id=&#34;hiding-dirty-work-in-the-type-system&#34;&gt;Hiding dirty work in the type system&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s start by trying to hide the &lt;code&gt;.dynamic&lt;/code&gt;/&lt;code&gt;.constant&lt;/code&gt; wrapper.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s an interesting trick for &lt;code&gt;enum&lt;/code&gt; cases with associated values: if they are used &lt;em&gt;without&lt;/em&gt; their associated values, they refer to their own construction function. For example, &lt;code&gt;TextFieldBinding.text&lt;/code&gt; has the type &lt;code&gt;(DynamicValue&amp;lt;String&amp;gt;) -&amp;gt; TextFieldBinding&lt;/code&gt; (a function that constructs a &lt;code&gt;TextFieldBinding&lt;/code&gt; from a &lt;code&gt;DynamicValue&amp;lt;String&amp;gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;We can use this trick to build abstractions around our enum cases. For example, we could construct overloaded versions of the existing &lt;code&gt;viewBinding&lt;/code&gt;, &lt;code&gt;controlBinding&lt;/code&gt; and &lt;code&gt;textBinding&lt;/code&gt; static functions – one that takes dynamic values and another that takes constant values.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example of an overload version of the &lt;code&gt;viewBinding&lt;/code&gt; static function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TextFieldBinding&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;viewBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DynamicBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TextFieldBinding&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inherited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inherited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;viewBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DynamicBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TextFieldBinding&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inherited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inherited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;dynamic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is probably confusing to read but notice that the first of these overloads uses an unwrapped &lt;code&gt;Value&lt;/code&gt; as the second parameter and returns a &lt;code&gt;.constant&lt;/code&gt; at the center of the wrapping layers, whereas the second takes a &lt;code&gt;Signal&amp;lt;Value&amp;gt;&lt;/code&gt; and wraps in &lt;code&gt;.dynamic&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the effect on the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;textFieldBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TextFieldBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flatMapLatest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signalForPerson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;controlBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ControlBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEnabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEditing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;viewBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ViewBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEditing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;white&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lightGray&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hmm. We &lt;em&gt;did&lt;/em&gt; get rid of the &lt;code&gt;.constant&lt;/code&gt;/&lt;code&gt;.dynamic&lt;/code&gt; wrapper but we&amp;rsquo;ve been forced to fully specify the type of the first parameter to &lt;code&gt;.textFieldBinding&lt;/code&gt;/&lt;code&gt;.controlBinding&lt;/code&gt;/&lt;code&gt;.viewBinding&lt;/code&gt; because the expected parameter is now a function instead of a &lt;code&gt;TextFieldBinding&lt;/code&gt;/&lt;code&gt;ControlBinding&lt;/code&gt;/&lt;code&gt;ViewBinding&lt;/code&gt; and because of this, we can&amp;rsquo;t use &lt;code&gt;.&lt;/code&gt; lookup.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s a real nuisance. We made a syntactic saving in one spot only to lose most of it in another.&lt;/p&gt;

&lt;h2 id=&#34;intermediate-type&#34;&gt;Intermediate type&lt;/h2&gt;

&lt;p&gt;To get the &lt;code&gt;.&lt;/code&gt; lookup back for the first parameter, we can use an intermediate type to provide a location for &lt;code&gt;.&lt;/code&gt; lookup to occur and encapsulate the desired &lt;code&gt;(Value) -&amp;gt; TextFieldBinding&lt;/code&gt; function internally.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to use a type named &lt;code&gt;BindingName&lt;/code&gt; as the intermediate type. This type will be defined as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;BindingName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Binding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Binding&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;escaping&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Binding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constructor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;constructor&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;BindingName&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Binding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TextFieldBinding&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BindingName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DynamicValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Binding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BindingName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DynamicValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Binding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;textFieldBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Binding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;constructor&lt;/code&gt; property of this type can then be used by the &lt;code&gt;viewBinding&lt;/code&gt;/&lt;code&gt;controlBinding&lt;/code&gt;/&lt;code&gt;textFieldBinding&lt;/code&gt; wrappers in place of the previous &lt;code&gt;name&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;With this, &lt;code&gt;.text&lt;/code&gt;, &lt;code&gt;.isEnabled&lt;/code&gt; and &lt;code&gt;.backgroundColor&lt;/code&gt; no longer require a full typename:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;textFieldBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flatMapLatest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signalForPerson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;controlBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEnabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEditing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;viewBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEditing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;white&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lightGray&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;a-little-operator-overloading&#34;&gt;A little operator overloading&lt;/h2&gt;

&lt;p&gt;This is &lt;em&gt;almost&lt;/em&gt; what I want but I still don&amp;rsquo;t like the fact that a wrapper function is the first visual element on each line. The only way to omit this wrapper in Swift is with operator overloading.&lt;/p&gt;

&lt;p&gt;The idea is to replace the &lt;code&gt;textFieldBinding&lt;/code&gt;, &lt;code&gt;controlViewBinding&lt;/code&gt; and &lt;code&gt;viewBinding&lt;/code&gt; wrapper functions with an operator overload that does the same work. I am not normally a fan of custom operators but I opted to use one here after becoming frustrated with scenarios involving huge numbers of closing parentheses (three or four closing parentheses becomes very difficult to read).&lt;/p&gt;

&lt;p&gt;I opted to use the custom operator &lt;code&gt;--&lt;/code&gt; (two hyphens) because it&amp;rsquo;s easy to type, is very visually light and it resembles an em-dash which might be validly used for separating keys and values in a list. I realize that it is used to denote code comments in some languages but I don&amp;rsquo;t think that&amp;rsquo;s a major conceptual conflict for use as a key-value separator.&lt;/p&gt;

&lt;p&gt;The final result is that the function looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;borderStyle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roundedRect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enabled&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEditing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEditing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;white&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lightGray&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flatMapLatest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signalForPerson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;didChange&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;triggerCombine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trigger&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve included the the &lt;code&gt;.didChange&lt;/code&gt; action binding here. Unlike the other bindings which model &lt;em&gt;setter&lt;/em&gt; properties on the &lt;code&gt;UITextField&lt;/code&gt;, this &lt;code&gt;.didChange&lt;/code&gt; binding models a callback.&lt;/p&gt;

&lt;p&gt;On a syntactic level, the only difference here is that instead of an &lt;code&gt;enum&lt;/code&gt; case with a &lt;code&gt;DynamicValue&amp;lt;T&amp;gt;&lt;/code&gt;, the &lt;code&gt;.didChange&lt;/code&gt; case has an associated &lt;code&gt;SignalInput&amp;lt;String&amp;gt;&lt;/code&gt;. An additional overload of the &lt;code&gt;--&lt;/code&gt; operator matches this &lt;code&gt;SignalInput&lt;/code&gt; scenario and ensures we provide the appropriate right-hand-side.&lt;/p&gt;

&lt;p&gt;The right-hand-side of the &lt;code&gt;--&lt;/code&gt; operator constructs a new &lt;code&gt;Input()&lt;/code&gt; to receive the callback and the &lt;code&gt;String&lt;/code&gt; parameter in the callback is combined with the &lt;code&gt;id&lt;/code&gt; from the &lt;code&gt;ViewState.shared.personSignal&lt;/code&gt; before sending a &lt;code&gt;setName&lt;/code&gt; message through to the &lt;code&gt;Document&lt;/code&gt; with a &lt;code&gt;bind(to:)&lt;/code&gt; call.&lt;/p&gt;

&lt;h2 id=&#34;alternatives&#34;&gt;Alternatives&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve gone back and forth on the design for this view construction syntax as much as any other code I&amp;rsquo;ve written. If you&amp;rsquo;re wondering why I didn&amp;rsquo;t choose a different approach&amp;hellip; I probably did, for a while, and either ran into a problem or otherwise grew to dislike something.&lt;/p&gt;

&lt;p&gt;One of the obvious alternatives is avoiding the custom operator. It is possible to implement a version with all the same features but looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}),&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My dislike of custom operators fought my dislike of parentheses and lost. It didn&amp;rsquo;t help that this approach required multiple overloads of &lt;em&gt;each&lt;/em&gt; binding name to allow dynamic/constant and other variants so it wasn&amp;rsquo;t as extensible.&lt;/p&gt;

&lt;p&gt;I also spent a long time using separate &lt;code&gt;&amp;lt;--&lt;/code&gt; and &lt;code&gt;--&amp;gt;&lt;/code&gt; operators for inputs and outputs. This was originally due to an older implementation where the operator overloads weren&amp;rsquo;t scaling well. I split the operator to lighten the overload resolution burden on the type system. After some restructuring, the operator resolution performance improved but I kept the separate operators for a while. Showing a direction for &amp;ldquo;inputs&amp;rdquo; and &amp;ldquo;outputs&amp;rdquo; might seem helpful but the types, the parameter names and the values you supply already indicate the direction of data flow and I liked the much plainer key-value styling of using &lt;code&gt;--&lt;/code&gt; everywhere, rather than trying to be visually clever about it.&lt;/p&gt;

&lt;h2 id=&#34;drawbacks&#34;&gt;Drawbacks&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s usually not a good idea to use an overloaded operator like &lt;code&gt;--&lt;/code&gt; inside array-literal square brackets. Past a half dozen values it can start to resolve slowly. This is a problem that &lt;em&gt;could&lt;/em&gt; occur by accident if you&amp;rsquo;re not paying attention. If you want to construct an array of these bindings, construct the array on its own line and assign to a variable with a fully specified type – Swift uses optimized type inference in this scenario.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a related problem when constructing a large generic type using this syntax. If resolving the &lt;code&gt;--&lt;/code&gt; terms is required to resolve the generic parameters, it&amp;rsquo;s not going to scale past a dozen or so parameters. Far better to explicitly specify your generic parameters.&lt;/p&gt;

&lt;p&gt;Variable argument lists &lt;em&gt;really&lt;/em&gt; confuse the Swift compilation error reporting mechanism. Accidentally omit a comma, add an extra comma, mix up your types, or make some other typo and the Swift compiler might:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;suggest you fix the second argument (even if the error is in the 20th argument)&lt;/li&gt;
&lt;li&gt;suggest you add a parameter name, even though no parameters should be named&lt;/li&gt;
&lt;li&gt;complain about being unable to resolve generic parameters that are explicitly specified&lt;/li&gt;
&lt;li&gt;complain that there are too many arguments in your variable argument list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an example, during the writing of this article, I accidentally wrote:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;borderStyle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roundRect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;when the correct spelling is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;borderStyle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roundedRect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Swift&amp;rsquo;s error message was &amp;ldquo;Generic parameter &amp;lsquo;Interface&amp;rsquo; could not be inferred&amp;rdquo;. &lt;code&gt;Interface&lt;/code&gt; is a generic parameter on one of the &lt;code&gt;--&lt;/code&gt; operator overloads – but it&amp;rsquo;s on a &lt;em&gt;different&lt;/em&gt; overload to the one you&amp;rsquo;d expect, here. The error message might as well be Swift shrugging its shoulders &amp;ldquo;Um&amp;hellip; not sure?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;With this type of code, you need to consider that any error reported by the compiler may point to the wrong location or otherwise indicate that the compiler has no idea at all what&amp;rsquo;s gone wrong. There are plenty of cases where I&amp;rsquo;ve needed to comment out parameter lines to narrow down the location of the problem.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re having difficulty isolating &lt;em&gt;why&lt;/em&gt; a compiler error is occurring in a given line, you can always replace the optimized syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;borderStyle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roundedRect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with the verbose syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;textFieldBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;borderStyle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roundedRect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))),&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Swift tends to give much better error reporting as you start to make things more explicit. Theoretically, you could be &lt;em&gt;completely&lt;/em&gt; explicit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;TextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Binding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;textFieldBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;TextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Binding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;borderStyle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;DynamicValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UITextFieldBorderStyle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;UITextFieldBorderStyle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roundedRect&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;although I&amp;rsquo;ve never had to go that far and there&amp;rsquo;s a reason why we want the compiler to do this work for us.&lt;/p&gt;

&lt;p&gt;Take another look at that last code sample. We need only write &lt;code&gt;.borderStyle -- .roundedRect&lt;/code&gt; and the compiler fills in the remainder – that&amp;rsquo;s what this article is all about.&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;You can play with some of the examples in this article in the &lt;a href=&#34;https://github.com/mattgallagher/CocoaWithLovePlaygrounds&#34;&gt;ViewConstruction.playground&lt;/a&gt;. The playground builds the following view:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.cocoawithlove.com/assets/blog/viewconstructor.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;nameField&lt;/code&gt; discussed in this article is visible at the top, along with some basic controls to alter the View-state and the Document to observe the effects on the &lt;code&gt;UITextField&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The playground includes three different code paths that can construct this &lt;code&gt;UITextField&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;standard Cocoa &lt;code&gt;cocoaViews&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;reactive programming &lt;code&gt;reactiveViews&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;cwlViews&lt;/code&gt; approach&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They should all appear the same to the user.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;Sources&amp;rdquo; folder in the playground contains a collection of files hastily butchered from CwlViews and a lazily constructed &amp;ldquo;Model&amp;rdquo; to provide the &lt;code&gt;ViewState&lt;/code&gt; and &lt;code&gt;Document&lt;/code&gt; in the examples. The result is not easy to read and the only purpose is to keep the actual playground page functional. The purpose of this playground is purely to present the ViewContruction playground page itself.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I aimed to construct a view in a single, self-contained expression using a syntax that resembled a declarative description of properties. The result is the following syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;borderStyle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roundedRect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enabled&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEditing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEditing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;white&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lightGray&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flatMapLatest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signalForPerson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;didChange&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;triggerCombine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;personSignal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trigger&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result is 14 lines, versus 11 lines in the original text description. It&amp;rsquo;s less than half the length of common Cocoa code to achieve the same result with significantly clearer structure.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s possible that the right-hand side might look cluttered or cryptic if you&amp;rsquo;re unfamiliar with reactive programming. However, even if you can&amp;rsquo;t read code at all, the structure of the code should reveal what it does: it is a list of 5 properties (&lt;code&gt;.borderStyle&lt;/code&gt;, &lt;code&gt;.enabled&lt;/code&gt;, &lt;code&gt;.backgroundColor&lt;/code&gt;, &lt;code&gt;.text&lt;/code&gt; and &lt;code&gt;.didChange&lt;/code&gt;) that we&amp;rsquo;re specifying on a &lt;code&gt;UITextField&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you do understand code and you know how verbose and unstructured this type of code can be, then you should appreciate how clearly and succinctly it is expressed. Inherited properties, constant or dynamic sources, inputs or outputs – all are possible while maintaining a clean, minimal aesthetic.&lt;/p&gt;

&lt;p&gt;I did use a custom operator. I&amp;rsquo;m normally opposed to custom operators and I will often dismiss others&amp;rsquo; code involving custom operators on the grounds that they makes things needlessly cryptic. I&amp;rsquo;m sure some programmers will look at this code and immediately dismiss it for the same reasons. I hope that most programmers will see that I&amp;rsquo;m not trying to be fancy with the custom operator; in fact it&amp;rsquo;s the best way to keep things simple.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.parameter -- value&lt;/code&gt; syntax is intended to read like a standard &lt;code&gt;parameter: value&lt;/code&gt; argument list, it just offers the ability to hide some boilerplate wrappers and handle a wider range of scenarios automatically.&lt;/p&gt;

&lt;h3 id=&#34;looking-forward&#34;&gt;Looking forward&lt;/h3&gt;

&lt;p&gt;This syntax is one aspect of the CwlViews framework. While I&amp;rsquo;m still scrambling to finish the framework itself, I&amp;rsquo;ll spend the next article talking a little about the impact on a program when its views have their behaviors fully specified and can entirely self-manage after construction.&lt;/p&gt;
&lt;br/&gt;Copyright Matt Gallagher, 2018. All rights reserved. Code samples may be use in accordance with the ISC-style license at https://www.cocoawithlove.com/about.html</description>
    </item>
    
    <item>
      <title>View-state driven applications</title>
      <link>https://www.cocoawithlove.com/blog/view-state-driven-applications.html</link>
      <pubDate>Wed, 08 Nov 2017 13:40:42 +1100</pubDate>
      
      <guid>https://www.cocoawithlove.com/blog/view-state-driven-applications.html</guid>
      <description>

&lt;p&gt;Cocoa applications are traditionally &amp;ldquo;presentation driven&amp;rdquo;. By that, I mean that view changes commence by first choosing the presentation change – like a view controller segue – and later we set the data to give the view content.&lt;/p&gt;

&lt;p&gt;In this article, I&amp;rsquo;ll look at why a presentation driven approach conflicts with the &lt;a href=&#34;worst-possible-application.html&#34;&gt;primary rule of application design discussed in the previous article&lt;/a&gt;. I&amp;rsquo;ll look at some limitations caused by this conflict and look at what happens when we invert the steps by first setting data – an encoding of display intent – then later update the presentation to match this data.&lt;/p&gt;

&lt;p&gt;To demonstrate some potential benefits of a data driven approach, the code in this article will show how you can implement complete user-interface logging, full state restoration and user-interface &amp;ldquo;time travel&amp;rdquo; in an app that remains as close as possible to Xcode&amp;rsquo;s &amp;ldquo;Master-Detail App&amp;rdquo; project template.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This article will be a more in-depth look at the same topic and &lt;a href=&#34;https://github.com/mattgallagher/Clocks&#34;&gt;sample project&lt;/a&gt; (significantly updated) that I presented at try! Swift NYC 2017. &lt;a href=&#34;https://academy.realm.io/posts/try-swift-nyc-2017-matt-gallagher-driving-view-state-through-data/&#34;&gt;The video for that talk is available&lt;/a&gt; if you&amp;rsquo;d prefer to start there.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;ideal-model-view-controller&#34;&gt;Ideal Model-View-Controller&lt;/h2&gt;

&lt;p&gt;Ideally, in a Model-View-Controller application, user-actions occur along the following data-flow path:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.cocoawithlove.com/assets/blog/ideal_mvc.svg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;figcaption&gt;Ideal data-flow path in a Model-View-Controller application&lt;/figcaption&gt;

&lt;p&gt;A User-action is received by a View which targets its Controller. The Controller performs an action on the Model. Neither the targeted Controller nor the interacted View make any changes at this time – they are merely propagating an event.&lt;/p&gt;

&lt;p&gt;The Model makes whatever changes are appropriate for the action and sends a notification. Any Controller interested in the notification may observe it. Observing Controllers update Views according to the changes described in the notification.&lt;/p&gt;

&lt;p&gt;This is ideal Model-View-Controller. User-actions always propagate through to the Model. No state changes until the action occurs on the Model. Views are updated solely as a result of notifications from the Model. As I discussed in the previous article, these requirements preserve the notion of the Model as an abstraction. These requirements are the minimum for any application design.&lt;/p&gt;

&lt;h2 id=&#34;clocks&#34;&gt;Clocks&lt;/h2&gt;

&lt;p&gt;To demonstrate a typical Model-View-Controller app, I wrote the following application.&lt;/p&gt;

&lt;div style=&#34;text-align:center;padding:16px;&#34;&gt;&lt;img src=&#34;https://www.cocoawithlove.com/assets/blog/clocks1.png&#34; /&gt; &lt;img src=&#34;https://www.cocoawithlove.com/assets/blog/clocks2.png&#34; /&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;You can view this version of the app on the &lt;a href=&#34;https://github.com/mattgallagher/Clocks/tree/undoredo&#34;&gt;&amp;ldquo;undoredo&amp;rdquo; branch of the Clocks github repository&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The app is a basic world-time viewer. The main screen shows a list of timezones. You can tap the &amp;ldquo;+&amp;rdquo; button and add new timezones from the &amp;ldquo;Selection&amp;rdquo; screen. You can set &amp;ldquo;Edit&amp;rdquo; mode on the main screen and delete existing timezones. You can tap on a timezone on the main screen to show a detail view. You can rename the timezone on the detail view.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not the functionality of the app that&amp;rsquo;s important but the fact that the app is, as close as I can make it, directly based on Xcode&amp;rsquo;s &amp;ldquo;Master-Detail App&amp;rdquo; project template and follows the same basic formula implied in Apple&amp;rsquo;s sample code.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at the code path for use-actions in this app. Code on the &lt;code&gt;MasterViewController&lt;/code&gt; for deleting a &lt;code&gt;Timezone&lt;/code&gt; from the list is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Controller receives delegate action from View and invokes Model action&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;commit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;editingStyle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;UITableViewCellEditingStyle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;forRowAt&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IndexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;Document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;removeTimezone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sortedTimezones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Document notifies change and Controller updates View accordingly&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;handleDocumentNotification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timezones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DataType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;action&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;removed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)?:&lt;/span&gt;
      &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sortedTimezones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;updateSortedTimezones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timezones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timezones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deleteRows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IndexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;section&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;automatic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These two functions show all the steps from our &amp;ldquo;ideal Model-View-Controller&amp;rdquo; diagram. The first function shows the action from the View and the invocation on the Model. The second function shows the observation of the Model-notification and the application of changes to the View.&lt;/p&gt;

&lt;h2 id=&#34;do-you-know-what-your-app-is-doing&#34;&gt;Do you know what your app is doing?&lt;/h2&gt;

&lt;p&gt;In the Clocks app, every time the Model is changed, a snapshot of the Model is saved. The app displays a slider at the bottom of the screen and by using the slider, you can rewind the Model back through each of the snapshots.&lt;/p&gt;

&lt;p&gt;The effect is straightforward: the slider and implements undo and redo using the Model snapshots.&lt;/p&gt;

&lt;p&gt;However, try the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;go to the &amp;ldquo;Selection&amp;rdquo; screen and add a new timezone&lt;/li&gt;
&lt;li&gt;from the main screen, select the &amp;ldquo;Edit&amp;rdquo; mode in the navigation bar&lt;/li&gt;
&lt;li&gt;delete the newly added timezone and leave &amp;ldquo;Edit&amp;rdquo; mode by selecting &amp;ldquo;Done&amp;rdquo;&lt;/li&gt;
&lt;li&gt;use the slider at the bottom of the screen to slowly undo these changes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The added timezone will reappear as its deletion is undone and then disappear again as its creation is undone. However &amp;ldquo;Edit&amp;rdquo; mode will not reappear and the selection screen will not reappear.&lt;/p&gt;

&lt;div style=&#34;text-align:center&#34;&gt;&lt;video style=&#34;border:1px solid black;&#34; src=&#34;https://www.cocoawithlove.com/assets/blog/clocks_undoredo.mp4&#34; controls /&gt;&lt;/div&gt;

&lt;figcaption&gt;A video of adding and deleting &#34;Casablanca&#34; then using the slider to undo and redo this change&lt;/figcaption&gt;

&lt;p&gt;We say that the View presents the Model and the Model is the true representation of the app but this simple app demonstrates that it&amp;rsquo;s a lie. &lt;strong&gt;The Model is &lt;em&gt;not&lt;/em&gt; a complete representation of the application&amp;rsquo;s state&lt;/strong&gt;. The View is &lt;em&gt;not&lt;/em&gt; a simple display of content from the Model. The &amp;ldquo;Selection&amp;rdquo; screen is not a part of the Model but it affects the display. &amp;ldquo;Edit&amp;rdquo; mode is not a part of the Model but it affects the display. Many User-actions in typical Model-View-Controller app do not follow the ideal data-flow path and change state without ever reaching the Model.&lt;/p&gt;

&lt;h2 id=&#34;separate-pipelines&#34;&gt;Separate pipelines&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://www.cocoawithlove.com/assets/blog/not_ideal_mvc.svg&#34; alt=&#34;Broken MVC&#34; /&gt;&lt;/p&gt;

&lt;figcaption&gt;Presentation driven changes involve View and Controller acting without the Model&lt;/figcaption&gt;

&lt;p&gt;In typical MVC Cocoa, as this diagram shows, segues and other &amp;ldquo;presentation&amp;rdquo; changes – like the appearance or disappearance of the &lt;code&gt;SelectionViewController&lt;/code&gt; in the Clocks app – are handled entirely within the Controller layer, leaving the Model out-of-the-loop.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not just a problem with &amp;ldquo;presentation&amp;rdquo; changes. Many common View and Controller classes in Cocoa are built around they idea that they can be constructed, updated and mutated without a Model being involved at all. It is common for any of the following data to exist &lt;em&gt;only&lt;/em&gt; in Views or Controllers and not in the Model:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The navigation stack in a navigation controller.&lt;/li&gt;
&lt;li&gt;Scroll position of a scroll view.&lt;/li&gt;
&lt;li&gt;Row selection in a table view.&lt;/li&gt;
&lt;li&gt;Tab selections in a tab view.&lt;/li&gt;
&lt;li&gt;The state of Switches and sliders.&lt;/li&gt;
&lt;li&gt;Uncommitted text fields.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This data that lives outside the Model is called &amp;ldquo;View-state&amp;rdquo;. This is a collection of the most user-visible state in our application and the standard approach in Model-View-Controller is to &lt;em&gt;ignore&lt;/em&gt; it.&lt;/p&gt;

&lt;h2 id=&#34;rethinking-what-should-be-a-model&#34;&gt;Rethinking what should be a Model&lt;/h2&gt;

&lt;p&gt;Yes, I know that traditional Model-View-Controller &lt;em&gt;intentionally&lt;/em&gt; excludes View-state from the Model. Traditional formulations of the Model describe the &lt;em&gt;persistent&lt;/em&gt; data of the app and everything non-persistent is excluded. The View intentionally held uncommitted data so validation and other business logic could be delayed until a &amp;ldquo;commit&amp;rdquo; step. RAM for multiple copies, CPU for validation, HD space for persistent storage – these things were slow and highly constrained resources.&lt;/p&gt;

&lt;p&gt;But in modern applications, we have the CPU power to validate everything continuously, we have the spare RAM to keep multiple copies of state and the View is persistent between app launches. The premise that non-Document state isn&amp;rsquo;t worthy of the same benefits as Document state lacks justification and discourages programmers from correctly abstracting non-Document state.&lt;/p&gt;

&lt;p&gt;If we demand clean Model abstractions for the Document, then I don&amp;rsquo;t think there&amp;rsquo;s a good justification to exempt View-state – or any other state – from the same requirements. I think the fact that we can&amp;rsquo;t rewind the entire user-interface as easily as the document is an indication that lack of coordination and management of state has left us out-of-control of our own application.&lt;/p&gt;

&lt;p&gt;I think we should expand the definition of Model to:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;All mutable state&lt;/strong&gt; that is directly represented in the View – whether it is stored in the &lt;em&gt;Document, View-state, User-settings, Filesystem, System-services, Network or elsewhere&lt;/em&gt; – &lt;strong&gt;is a Model&lt;/strong&gt; and should be cleanly abstracted from the View. Failure to isolate this mutable state within a Model abstraction represents a failure of application design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Following this rule dogmatically, I should probably have united the use of &lt;code&gt;Timer&lt;/code&gt; and &lt;code&gt;Date&lt;/code&gt; under a single &amp;ldquo;Time&amp;rdquo; Model abstraction in the app but at this point, it&amp;rsquo;s far from the biggest problem.&lt;/p&gt;

&lt;h2 id=&#34;a-model-for-view-state&#34;&gt;A Model for View-state&lt;/h2&gt;

&lt;p&gt;We need a Model abstraction for the View-state.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve never treated View-state as a Model before, this can be a strange statement to make. To understand what&amp;rsquo;s required, let&amp;rsquo;s start by looking at the Document Model that we already have.&lt;/p&gt;

&lt;h3 id=&#34;the-existing-document-model&#34;&gt;The existing &lt;code&gt;Document&lt;/code&gt; Model&lt;/h3&gt;

&lt;p&gt;The Document Model in the Clocks app is called &lt;code&gt;Document&lt;/code&gt; and offers the following mutating methods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;addTimezone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;updateTimezone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;removeTimezone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By understanding the actions we can perform on the Model, we can understand the Model. These actions lead to the internal representation of the &lt;code&gt;Document&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;timezones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Timezone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[:]&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Timezone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Codable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;identifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The primitive storage for the &lt;code&gt;Document&lt;/code&gt; is just a collection of &lt;code&gt;identifier&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; pairs, keyed by &lt;code&gt;uuid&lt;/code&gt; in a dictionary.&lt;/p&gt;

&lt;h3 id=&#34;our-new-viewstate-model&#34;&gt;Our new &lt;code&gt;ViewState&lt;/code&gt; Model&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s look at the View-state in a similar way. I&amp;rsquo;ve already discussed the major actions a user can perform:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tap a row in the main table view to change the detail selection&lt;/li&gt;
&lt;li&gt;enable or disable &amp;ldquo;Edit&amp;rdquo; mode on the main table view&lt;/li&gt;
&lt;li&gt;show or hide the new timezone selection view&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There&amp;rsquo;s also scrolling in both the main table view and the new timezone selection view and a search field in the new timezone selection view for filtering the list.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the full list of user actions that don&amp;rsquo;t immediately result in a change to the &lt;code&gt;Document&lt;/code&gt;. That gives the following list of mutating methods for our new &lt;code&gt;ViewState&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;scrollMasterView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;offsetY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Double&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;scrollSelectionView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;offsetY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Double&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;changeDetailSelection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;changeEditModeOnMaster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isEditing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;changeSelectionViewVisibility&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;visible&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;selectionViewSearchString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We could represent the values that these methods change as 6 properties on a single struct but I think it&amp;rsquo;s better to organize these properties as a tree of structs, reflecting the actual Controllers in the View-tree.&lt;/p&gt;

&lt;p&gt;This gives a data representation of our &lt;code&gt;ViewState&lt;/code&gt; Model as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;splitView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SplitViewState&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SplitViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SplitViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Codable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;masterView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MasterViewState&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;detailView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DetailViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;selectionView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SelectionViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MasterViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Codable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;masterScrollOffsetY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;isEditing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SelectionViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Codable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;selectionScrollOffsetY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;searchText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DetailViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Codable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Look back over the roughly 30 lines of declaration code in this section. These declarations are an abstract representation of the entire 600 line program.&lt;/p&gt;

&lt;h2 id=&#34;from-presentation-driven-to-view-state-driven&#34;&gt;From Presentation driven to View-state driven&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll look at how this changes our code but first, lets look at how a &amp;ldquo;presentation&amp;rdquo; change occurred in the &amp;ldquo;undo-redo&amp;rdquo; version of the app.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Controller receives delegate action from View and invokes performSegue&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;didSelectRowAt&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IndexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;performSegue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withIdentifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;showDetail&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sender&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Controller sends data to segue destination&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;prepare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;segue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIStoryboardSegue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sender&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;segue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;identifier&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;showDetail&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
       &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;indexPath&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indexPathForSelectedRow&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
           &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;timezone&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sortedTimezones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
           &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;controller&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;segue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;destination&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;
              &lt;span class=&#34;n&#34;&gt;UINavigationController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topViewController&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DetailViewController&lt;/span&gt;
           &lt;span class=&#34;n&#34;&gt;controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timezone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;
           &lt;span class=&#34;n&#34;&gt;controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;navigationItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;leftBarButtonItem&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
              &lt;span class=&#34;n&#34;&gt;splitViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;displayModeButtonItem&lt;/span&gt;
           &lt;span class=&#34;n&#34;&gt;controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;navigationItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;leftItemsSupplementBackButton&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As clumsy as this code looks, it is almost unchanged from the &amp;ldquo;Master-Detail App&amp;rdquo; template. This is a &lt;em&gt;presentation driven&lt;/em&gt; transition. It starts by asking a the Controller to change the View-tree in the &lt;code&gt;tableView(_:didSelectRowAt:)&lt;/code&gt; function and then during the View-tree change in the &lt;code&gt;prepare(for:sender:)&lt;/code&gt; function, it attempt to find and set data on the newly created view.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s so much to &lt;em&gt;dislike&lt;/em&gt; about this code but from a Model abstraction perspective, the biggest problem is that the code never clearly encodes its &lt;em&gt;intent&lt;/em&gt;. The &lt;code&gt;performSegue&lt;/code&gt; line implies that the intent is merely to &amp;ldquo;showDetail&amp;rdquo; but that&amp;rsquo;s not true: the intent is to show the selected &lt;code&gt;timezone.uuid&lt;/code&gt; &lt;em&gt;in&lt;/em&gt; the detail view. The hideously ugly work performed in the &lt;code&gt;prepare(for:sender:)&lt;/code&gt; function is mostly just trying to reconstruct the key operand of that intent from the crime-scene wreckage left behind on the Controller and &lt;code&gt;tableView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s now look at this code in a View-state driven approach.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// MasterViewController receives delegate action from View and invokes performSegue&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;didSelectRowAt&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IndexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;changeDetailSelection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sortedTimezones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// SplitViewController receives delegate action from View and invokes performSegue&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;handleViewStateNotification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SplitViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SplitViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;action&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;changedDetail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;detailView&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;masterViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;performSegue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withIdentifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;detail&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sender&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// other actions omitted&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We invoke an action on the &lt;code&gt;ViewState&lt;/code&gt; which changes the &lt;em&gt;data&lt;/em&gt; first – immediately declaring an intent to change the detail selection to the selected UUID – then the &lt;code&gt;SplitViewController&lt;/code&gt; (not the &lt;code&gt;MasterViewController&lt;/code&gt;) observes that data change and updates the detail presentation in response. We never need to set the &lt;code&gt;uuid&lt;/code&gt; directly on the &lt;code&gt;DetailViewController&lt;/code&gt; – the &lt;code&gt;DetailViewController&lt;/code&gt; subscribes to the &lt;code&gt;ViewState&lt;/code&gt; and learns what its &lt;code&gt;uuid&lt;/code&gt; is from there.&lt;/p&gt;

&lt;p&gt;Compare this code sample to the &amp;ldquo;ideal Model-View-Controller&amp;rdquo; Model change back in the &lt;a href=&#34;#clocks&#34;&gt;Clocks section&lt;/a&gt;. The two changes follow a nearly identical series of steps.&lt;/p&gt;

&lt;h2 id=&#34;what-do-we-gain&#34;&gt;What do we gain?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;You can find the &lt;code&gt;ViewState&lt;/code&gt; build on the &lt;a href=&#34;https://github.com/mattgallagher/Clocks&#34;&gt;&amp;ldquo;master&amp;rdquo; branch of the Clocks github repository&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;time-travel&#34;&gt;Time-travel&lt;/h3&gt;

&lt;p&gt;Unlike the &amp;ldquo;undoredo&amp;rdquo; branch of this project, dragging the slider on the &amp;ldquo;master&amp;rdquo; branch offers full &lt;em&gt;time-travel&lt;/em&gt;.&lt;/p&gt;

&lt;div style=&#34;text-align:center&#34;&gt;&lt;video style=&#34;border:1px solid black;&#34; src=&#34;https://www.cocoawithlove.com/assets/blog/clocks_timetravel.mp4&#34; controls /&gt;&lt;/div&gt;

&lt;figcaption&gt;A video of adding and deleting &#34;Casablanca&#34; then using the slider to wind the entire user-interface forwards and backwards through the action.&lt;/figcaption&gt;

&lt;p&gt;Ironically, for an app that displays world time, time-travel will not affect the time displayed on any of the clocks since (state from &lt;code&gt;Timer&lt;/code&gt; and &lt;code&gt;Date&lt;/code&gt; is deliberately omitted from the &lt;code&gt;HistoryViewController&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;What time-travel means is that the slider at the bottom of the screen will rewind the &lt;code&gt;ViewState&lt;/code&gt; at the same time as the &lt;code&gt;Document&lt;/code&gt;, resulting in an entire app user-interface that can be wound forward and backward with the slider. Edit mode will pop on and off, the detail view will pop in and out, the selection view will appear and disappear, the scroll position will adjust, uncommitted text fields will wind forward and backward like committed text fields.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve never seen a time-travelling user-interface before, I strongly recommend actually running the project and playing with the slider. It &lt;em&gt;shouldn&amp;rsquo;t&lt;/em&gt; be surprising to see an application instantly and completely respond to commands but it &lt;em&gt;is&lt;/em&gt;. We&amp;rsquo;re accustomed to being perpetually out-of-control of our own applications.&lt;/p&gt;

&lt;p&gt;The slider has a &lt;code&gt;UISwitch&lt;/code&gt; on the left. When you activate the slider, it will split into separate sliders for &amp;ldquo;Document&amp;rdquo; and &amp;ldquo;View-state&amp;rdquo; so you can manipulate the two independently. This will occasionally result in quirks where the &amp;ldquo;View-state&amp;rdquo; needs to be altered to reconcile it with the &amp;ldquo;Document&amp;rdquo; but it&amp;rsquo;s proof that the two are truly separate models.&lt;/p&gt;

&lt;h3 id=&#34;viewstate-acts-as-a-coordinator&#34;&gt;&lt;code&gt;ViewState&lt;/code&gt; acts as a &amp;ldquo;Coordinator&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;With a View-state Model, separate controllers can implicitly coordinate by tracking the same data in the View-state Model. There&amp;rsquo;s no longer a need for the &lt;code&gt;MasterViewController&lt;/code&gt; to traverse through the view and controller hierarchy to set values on the &lt;code&gt;DetailViewController&lt;/code&gt; – the &lt;code&gt;DetailViewController&lt;/code&gt; can simply ask the &lt;code&gt;ViewState&lt;/code&gt; for its values.&lt;/p&gt;

&lt;p&gt;In a presentation driven app, there&amp;rsquo;s an instinct to handle the full path of all actions on the Controller where the action is received. This dumps a lot of work on the &lt;code&gt;MasterViewController&lt;/code&gt;, even though it&amp;rsquo;s not the parent of many of the actions it coordinates.&lt;/p&gt;

&lt;p&gt;With a View-state Model, the presentation of the &lt;code&gt;SelectionViewController&lt;/code&gt; and &lt;code&gt;DetailViewController&lt;/code&gt; can be managed by the actual parent of these actions (the &lt;code&gt;SplitViewController&lt;/code&gt;) rather than trying to handle all this work from the table view in the &lt;code&gt;MasterViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some design patterns use a &lt;a href=&#34;http://khanlou.com/2015/01/the-coordinator/&#34;&gt;&amp;ldquo;Coordinator&amp;rdquo;&lt;/a&gt; to actively propagate communication between Controllers. The &lt;code&gt;ViewState&lt;/code&gt; fulfills a similar role through passively observed Model-data, rather than actively propagated Control-actions.&lt;/p&gt;

&lt;h3 id=&#34;persistence-is-trivial&#34;&gt;Persistence is trivial&lt;/h3&gt;

&lt;p&gt;In a typical Cocoa app, we rely on Storyboards to help persist view controllers. Even with the help of Storyboards, there is often substantial &lt;code&gt;UIStateRestoring&lt;/code&gt; or &lt;code&gt;UIDataSourceModelAssociation&lt;/code&gt; work to fully restore our state.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;ViewState&lt;/code&gt;, all commit and verify work is already part of the &lt;code&gt;ViewState&lt;/code&gt; observing pipeline so everything is automatic. No &lt;code&gt;UIStateRestoring&lt;/code&gt; or &lt;code&gt;UIDataSourceModelAssociation&lt;/code&gt; needed. In fact, you don&amp;rsquo;t even need Storyboards.&lt;/p&gt;

&lt;p&gt;Assuming you&amp;rsquo;re already handling the &lt;code&gt;ViewState&lt;/code&gt; notifications correctly, this is &lt;em&gt;all&lt;/em&gt; the code required for state restoration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIApplication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;willEncodeRestorableStateWith&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;coder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSCoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;coder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serialized&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;forKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;viewStateKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIApplication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;didDecodeRestorableStateWith&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;coder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSCoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;coder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decodeObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;forKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;viewStateKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reloadAndNotify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsonData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;restoring-state-for-testing-scenarios&#34;&gt;Restoring state for testing scenarios&lt;/h3&gt;

&lt;p&gt;Since restoring the user-interface is no longer tied to &lt;code&gt;UIStateRestoration&lt;/code&gt; or Storyboards, you can jump to a particular user-interface configuration at any time – speeding development and debugging scenarios.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;jsonString&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   {&amp;#34;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;detailView&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;:{&amp;#34;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8642&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FA12&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;D3F7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B308&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B415A7145D0&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;},
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   &amp;#34;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;masterView&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;:{&amp;#34;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;masterScrollOffsetY&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;:0,&amp;#34;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEditing&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;:false}}
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;jsonData&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;using&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reloadAndNotify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsonData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your document also supports arbitrary reloading (as the &lt;code&gt;Document&lt;/code&gt; does in the Clocks app) you can combine the two to jump to any debug or testing scenario at any time.&lt;/p&gt;

&lt;h3 id=&#34;debug-information&#34;&gt;Debug information&lt;/h3&gt;

&lt;p&gt;The entire state of the view can be logged to the console on each step, enabling better debugging – you can know the exact state at any time (and the preceding transitions) so you can quickly find the cause of problems.&lt;/p&gt;

&lt;p&gt;The Clocks app logs both its Document and View-state when either changes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Changed Document to:
[&amp;quot;CC0D7C93-3FBC-4D89-9127-ABBF798420F6&amp;quot;,{&amp;quot;identifier&amp;quot;:&amp;quot;Australia\/Melbourne&amp;quot;,
&amp;quot;name&amp;quot;:&amp;quot;Melbourne&amp;quot;,&amp;quot;uuid&amp;quot;:&amp;quot;CC0D7C93-3FBC-4D89-9127-ABBF798420F6&amp;quot;},
&amp;quot;54FA679F-6036-431D-957F-6E8CC1B8DA50&amp;quot;,{&amp;quot;identifier&amp;quot;:&amp;quot;Africa\/Addis_Ababa&amp;quot;,
&amp;quot;name&amp;quot;:&amp;quot;Addis Ababa&amp;quot;,&amp;quot;uuid&amp;quot;:&amp;quot;54FA679F-6036-431D-957F-6E8CC1B8DA50&amp;quot;}]
Changed ViewState to:
{&amp;quot;detailView&amp;quot;:{&amp;quot;uuid&amp;quot;:&amp;quot;CC0D7C93-3FBC-4D89-9127-ABBF798420F6&amp;quot;},&amp;quot;masterView&amp;quot;:
&amp;quot;masterScrollOffsetY&amp;quot;:0,&amp;quot;isEditing&amp;quot;:false}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This logged state can be directly used in state restoration – as in the previous example – to recreate the scenario at any time.&lt;/p&gt;

&lt;h2 id=&#34;what-is-the-cost&#34;&gt;What is the cost?&lt;/h2&gt;

&lt;h3 id=&#34;code-size&#34;&gt;Code size&lt;/h3&gt;

&lt;p&gt;Tracking the View-state is usually more code. This is no different to any kind of Model – there are more declarations and more work to set and observe changes going into and out of the model abstraction.&lt;/p&gt;

&lt;p&gt;Measuring the &amp;ldquo;.swift&amp;rdquo; file size (excluding the &amp;ldquo;Utilities&amp;rdquo; folder) with the command-line tool &lt;a href=&#34;https://github.com/AlDanial/cloc&#34;&gt;cloc&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &amp;ldquo;undoredo&amp;rdquo; version of the project is 437 lines&lt;/li&gt;
&lt;li&gt;the &amp;ldquo;timetravel&amp;rdquo; version is 610 lines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;85 lines of that difference is the &amp;ldquo;ViewState.swift&amp;rdquo; file. The remaining 88 line difference is more complicated; it&amp;rsquo;s more like a 150 line difference, sometimes an increase, sometimes a decrease.&lt;/p&gt;

&lt;p&gt;Without needing to go via &lt;code&gt;ViewState&lt;/code&gt;, the &amp;ldquo;undoredo&amp;rdquo; branch has a few buttons connected directly to segues in the Storyboard. The &amp;ldquo;undoredo&amp;rdquo; branch also doesn&amp;rsquo;t track scrolling (the &amp;ldquo;timetravel&amp;rdquo; build could omit this but it&amp;rsquo;s part of making time-travel seem magical).&lt;/p&gt;

&lt;p&gt;Tracking View-state doesn&amp;rsquo;t always increase code size. For some tasks, it simplifies. The &lt;code&gt;DetailViewController&lt;/code&gt; actually benefits from not needing to self-manage when the &lt;code&gt;Timezone&lt;/code&gt; it is observing is deleted from the &lt;code&gt;Document&lt;/code&gt;. All &amp;ldquo;prepare for segue&amp;rdquo; methods are removed from &lt;code&gt;MasterViewController&lt;/code&gt;. All &lt;code&gt;UIStateRestoring&lt;/code&gt; methods are removed.&lt;/p&gt;

&lt;h3 id=&#34;lots-of-observing&#34;&gt;Lots of observing&lt;/h3&gt;

&lt;p&gt;In an app without View-state, you might need to observe just one object – the Document Model – in each Controller. If you add View-state to this, your observation needs are going to double.&lt;/p&gt;

&lt;p&gt;My particular implementation of observing for the &lt;code&gt;Document&lt;/code&gt; and &lt;code&gt;ViewState&lt;/code&gt; doubles this &lt;em&gt;again&lt;/em&gt;. Have a look at the &lt;code&gt;handleViewStateNotification&lt;/code&gt; for the &lt;code&gt;SelectionViewController&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;handleViewStateNotification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SelectionViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;SelectionViewState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;action&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;changedSearchString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;updateForSearchString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;searchText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scrolled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contentOffset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CGFloat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;selectionScrollOffsetY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;none&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contentOffset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CGFloat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;selectionScrollOffsetY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;searchBar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;searchText&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;updateForSearchString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;searchText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function has to handle two possible &lt;code&gt;ViewState&lt;/code&gt; actions – &amp;ldquo;search string change&amp;rdquo; and &amp;ldquo;search table scrolled&amp;rdquo; – but it &lt;em&gt;also&lt;/em&gt; has to handle a third &lt;code&gt;.none&lt;/code&gt; case which is used when the &lt;code&gt;ViewState&lt;/code&gt; is reloaded and &lt;em&gt;everything&lt;/em&gt; needs to be reprocessed.&lt;/p&gt;

&lt;p&gt;It would be nice to avoid this redundancy but I&amp;rsquo;m not sure how to do this cleanly since sometimes, responding to an already applied action and restoring state requires slightly different logic (see the need to set the &lt;code&gt;searchBar?.text&lt;/code&gt; during restore which isn&amp;rsquo;t needed on &lt;code&gt;.changedSearchString&lt;/code&gt; because the user has &lt;em&gt;already&lt;/em&gt; set this value).&lt;/p&gt;

&lt;h3 id=&#34;uncooperative-uikit-appkit-classes&#34;&gt;Uncooperative UIKit/AppKit classes&lt;/h3&gt;

&lt;p&gt;The hardest part when writing an application for the first time in a View-state driven approach is learning how to handle Views and Controllers that fail to precisely notify when changes occur and refuse to accurately adhere to state they are given.&lt;/p&gt;

&lt;p&gt;To be clear: none of these are show stopping problems, nor even particularly difficult to manage, but they all require guesswork and multiple steps since Cocoa classes were never written to clearly notify changes in state or follow programmatic (rather than user) instructions.&lt;/p&gt;

&lt;h4 id=&#34;conflicting-actions&#34;&gt;Conflicting actions&lt;/h4&gt;

&lt;p&gt;Multiple &amp;ldquo;present&amp;rdquo; animations are not permitted to occur at the same time – so if you&amp;rsquo;re trying to restore two pieces of state simultaneously, these might need to be queued – otherwise the app will raise an exception. This causes problems in the Clocks app when the modal &amp;ldquo;Selection&amp;rdquo; screen and the &amp;ldquo;Detail&amp;rdquo; view need to be restored at the same time. The &lt;code&gt;SplitViewController&lt;/code&gt; class contains some careful sequencing interaction between &lt;code&gt;selectionViewController&lt;/code&gt; and &lt;code&gt;reloadDetailView&lt;/code&gt; to avoid problems.&lt;/p&gt;

&lt;p&gt;A less fatal conflict occurs when trying to set a scroll position during &lt;code&gt;UITableView&lt;/code&gt; reloads. The &lt;code&gt;UITableView&lt;/code&gt; reloads asynchronously over an indeterminate amount of time. There is no way to queue the scroll position change to occur when this operation is complete. When a &lt;code&gt;tableView.reloadData()&lt;/code&gt; occurs, &lt;code&gt;MasterViewController&lt;/code&gt; does not bother to set the scroll position at all since I was not able to find a reliable way to both reload data and scroll.&lt;/p&gt;

&lt;h4 id=&#34;poorly-notified-changes&#34;&gt;Poorly notified changes&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;UINavigationController&lt;/code&gt; may change its navigation stack without explaining why when the user taps the back button. The &lt;code&gt;navigationController(_:didShow:animated:)&lt;/code&gt; method is forced to guess what may have happened.&lt;/p&gt;

&lt;p&gt;Detecting scroll state presents a slightly different problem: to detect when scrolling has ended, you need to implement &lt;em&gt;two&lt;/em&gt; separate delegate methods – &lt;code&gt;scrollViewDidEndDecelerating&lt;/code&gt; and &lt;code&gt;scrollViewDidEndDragging&lt;/code&gt; – and carefully check the &lt;code&gt;decelerate&lt;/code&gt; parameter on the latter to determine if it is actually the end of scrolling.&lt;/p&gt;

&lt;h4 id=&#34;user-actions-with-no-clear-programmatic-equivalent&#34;&gt;User-actions with no clear programmatic equivalent&lt;/h4&gt;

&lt;p&gt;In portrait on an iPhone, the detail view of the split view will also collapse onto the master view&amp;rsquo;s navigation stack. The user can tap the back button to remove this collapsed view but there&amp;rsquo;s no clean action to ask the split view to do it. It&amp;rsquo;s necessary to check the &lt;code&gt;UINavigationController&lt;/code&gt; and &lt;em&gt;guess&lt;/em&gt; whether the top view is a collapsed detail view and use &lt;code&gt;popViewController&lt;/code&gt; to evict it. Messy work.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;You can explore the two versions of the Clocks app on github:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mattgallagher/Clocks/tree/undoredo&#34;&gt;the &amp;ldquo;undoredo&amp;rdquo; branch of the Clocks app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mattgallagher/Clocks&#34;&gt;the master, aka &amp;ldquo;timetravel&amp;rdquo; branch of the Clocks app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(&lt;strong&gt;Minor note&lt;/strong&gt;: when debugging one branch after using the other, you may see non-fatal state restoration errors as the two apps contain incompatible state restoration formats.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The purpose of this article was to present an approach for tracking View-state in an application that is otherwise as close as possible to a typical Cocoa Model-View-Controller application.&lt;/p&gt;

&lt;p&gt;I would argue that tracking View-state in a Model is more true to the spirit of Model-View-Controller than the traditional &amp;ldquo;ignore View-state&amp;rdquo; approach. When you track View-state in a Model, then the sum of Models in your app is truly a representation of your &lt;em&gt;entire&lt;/em&gt; app and your View is the simple display of the Model that it should be, rather than being a complex combination of Model plus other untracked state.&lt;/p&gt;

&lt;p&gt;As I write this article, I have now written a handful of trivial to small apps using this pattern. It manages navigation and state restoration really well while offering good conceptual clarity and excellent debugging capabilities. I think I&amp;rsquo;ll continue to write all small MVC apps this way. Observing both View-state and the Model on each Controller does get a little tiring and some Cocoa classes can feel truly obstinate when you&amp;rsquo;re trying to get them to behave precisely and punctually but the balance still feels strongly in favor of this approach.&lt;/p&gt;

&lt;p&gt;There are numerous frameworks that aim to simplify issues with observing multiple Models or driving Cocoa classes through data by using reactive programming or reducers. However, these bigger frameworks increase the distance between the code you write and the effects of that code. The advantage to this View-state approach is that there is no real framework &amp;ldquo;in the way&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The time-travel capability in the Clocks app is fun but you&amp;rsquo;d never ship time-travel in a real application. Even when debugging, simple View-state logging and the ability to restore your UI from JSON at any time are far more useful tools. I actually keep View-state logging on all the time because it is &lt;em&gt;really&lt;/em&gt; helpful when something goes wrong – you can immediately understand if the problem was due to mis-setting View-state or mis-interpreting/observing.&lt;/p&gt;

&lt;p&gt;However, time-travel is &lt;em&gt;conceptually&lt;/em&gt; important for programmers who have forgotten that our programs are supposed to precisely and punctually obey our intent. Speaking for myself, I know that I had grown accustomed to boringly repetitive human-driven actions to arrange the user-interface while developing or testing. Launching the debugger directly into the precise state that I&amp;rsquo;m developing and testing has huge benefits (yes, &lt;code&gt;UIStateRestoration&lt;/code&gt; is supposed to do this but it&amp;rsquo;s far more opaque and difficult to control).&lt;/p&gt;

&lt;h3 id=&#34;looking-forward&#34;&gt;Looking forward&lt;/h3&gt;

&lt;p&gt;One of the biggest drawbacks of this approach is the need for extensive observing code on the view controller that grows more complex with view properties that are interdependent on both the View-state and the Document.&lt;/p&gt;

&lt;p&gt;In the next article, I&amp;rsquo;ll start by simplifying these observations with reactive programming and then continue to improve the syntax by building views in code with all behaviors fully specified.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Self promotion? On my own blog?!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This pattern, along with other experimental and conventional patterns and architectural techniques, are examined in depth in a book I&amp;rsquo;m writing with &lt;a href=&#34;https://twitter.com/chriseidhof&#34;&gt;Chris Eidhof&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/floriankugler&#34;&gt;Florian Kugler&lt;/a&gt; from &lt;a href=&#34;https://www.objc.io&#34;&gt;objc.io&lt;/a&gt; titled &lt;a href=&#34;https://www.objc.io/books/app-architecture/&#34;&gt;App Architecture&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.objc.io/books/app-architecture/&#34;&gt;&lt;img src=&#34;https://www.cocoawithlove.com/assets/blog/app_architecture.png&#34; alt=&#34;App Architecture&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.objc.io/books/app-architecture/&#34;&gt;You can &lt;strong&gt;order now&lt;/strong&gt; in Early Access to get the first chapter immediately and subsequent chapters as they&amp;rsquo;re released&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;Copyright Matt Gallagher, 2018. All rights reserved. Code samples may be use in accordance with the ISC-style license at https://www.cocoawithlove.com/about.html</description>
    </item>
    
    <item>
      <title>The worst possible application</title>
      <link>https://www.cocoawithlove.com/blog/worst-possible-application.html</link>
      <pubDate>Fri, 20 Oct 2017 10:27:52 +1000</pubDate>
      
      <guid>https://www.cocoawithlove.com/blog/worst-possible-application.html</guid>
      <description>

&lt;p&gt;In this article, I deliberately try to write the worst possible application by breaking the primary rule of application design: keep the model and view separate.&lt;/p&gt;

&lt;p&gt;The purpose is to try to answer a question clearly: what direct effect does an application design pattern have on code? In an otherwise simple, clean implementation, will an application have any obvious flaws if I follow the worst possible application design pattern? Will it get dramatically better if I switch back to a more common pattern?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-topic-of-contradictions&#34;&gt;A topic of contradictions&lt;/h2&gt;

&lt;p&gt;It is really difficult to make an unambiguously true statement when talking about application design patterns. The problem is that there&amp;rsquo;s a huge distance between the vague, high-level descriptions provided by application design patterns and the specific details of an application implementation. This distance creates a situation where almost anything can be true in the implementation, despite the intentions of the application design pattern.&lt;/p&gt;

&lt;p&gt;Out of frustration, with the entire field of application architecture, I decided to take a different approach: deliberately write an app using the worst possible application design pattern. Perhaps if I made some serious mistakes, they would have dramatic, visible effects and I could start to build a foundation for talking about application design patterns in a clear and unambiguous manner.&lt;/p&gt;

&lt;h2 id=&#34;seeking-out-disaster&#34;&gt;Seeking out disaster&lt;/h2&gt;

&lt;p&gt;What&amp;rsquo;s the worst possible application design pattern?&lt;/p&gt;

&lt;p&gt;I deliberately devised 5 scenarios that I felt seriously undermined the typical Cocoa Model-View-Controller pattern and discussed them with 4 different Cocoa programmers that I work with, presenting each scenario as though I had encountered it in a real app, to see which mistake people thought was the worst.&lt;/p&gt;

&lt;p&gt;Here are the scenarios I presented:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The app has a 4500 line &lt;code&gt;UIViewController&lt;/code&gt; and changing any method seems to break the behavior of every child view.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was pointed out that this isn&amp;rsquo;t a design pattern mistake as much as an implementation issue. While it is common – to the point of cliché – it can be handled through standard refactoring and decomposition steps.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Model contains blocks of CoreGraphics drawing code which are passed through to the View as a closure for rendering.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A few people bought into the premise that this could be a valid approach; maybe it doesn&amp;rsquo;t seem different enough to passing around SVG data. I still think it has untapped potential as one of the worst ideas imaginable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Model holds references to each of the app&amp;rsquo;s Controllers and when a value changes the Model directly invokes refresh on Controllers it knows to be dependent on the changed value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This evoked some actual groans. It might be the most mind bogglingly stupid of the scenarios that I presented but much of that stupidity derives from how simple the solution is (set up proper observers/notifications).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The app has 3 separate Models and it&amp;rsquo;s the View Controller&amp;rsquo;s responsibility to keep them all in sync.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you tell people that you&amp;rsquo;re coordinating data from 3 different web services in a single View Controller, suddenly it seems like a real-world problem and people start suggesting practical solutions; not nearly terrible enough.&lt;/p&gt;

&lt;p&gt;I decided the winner was the only application architectural mistake where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;nobody tried to tell me the problem could be fixed with a simple refactoring&lt;/li&gt;
&lt;li&gt;nobody bought into the idea that you should ever write an app this way&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Drumroll&amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There&amp;rsquo;s no separate Model in the app. Data is stored in whatever View requires it and the Controllers coordinate changes and communication between Views.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think this is one of the least exciting mistakes (after the totally banal &amp;ldquo;massive view controller&amp;rdquo;) but after decades of having Model-View-Controller drummed into our collective minds, &amp;ldquo;Failure to separate the Model and View&amp;rdquo; is widely agreed to be the worst possible mistake in application design.&lt;/p&gt;

&lt;p&gt;Very well then, let&amp;rsquo;s make it happen!&lt;/p&gt;

&lt;h2 id=&#34;unseparated&#34;&gt;Unseparated&lt;/h2&gt;

&lt;p&gt;What does &amp;ldquo;Failure to separate the Model and View&amp;rdquo; mean?&lt;/p&gt;

&lt;p&gt;Unfortunately, like everything else in application design patterns, it&amp;rsquo;s difficult to get a concrete answer. Prominent authors have written &lt;a href=&#34;https://martinfowler.com/eaaDev/SeparatedPresentation.html&#34;&gt;whole articles on this type of separation&lt;/a&gt; without giving a single clear rule.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to use the following rules for a &lt;strong&gt;separated Model and View&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A Model interface must cleanly encapsulate all application state and must not reference any view or application frameworks.&lt;/li&gt;
&lt;li&gt;Non-Model components may invoke mutating actions on the Model interface but the interface must present these as requests to perform an action, not primitive data operations.&lt;/li&gt;
&lt;li&gt;After performing an action on the Model interface, a non-Model component must not immediately update or refresh any non-Model state. Updates dependent on Model data may occur only in response to change notifications from the Model.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;ldquo;Failure to separate the Model and View&amp;rdquo; will be defined as breaking one or more of these rules.&lt;/p&gt;

&lt;p&gt;It might not be immediately clear why I&amp;rsquo;ve chosen all of these three rules but in short: it forces the Model to be walled off from the rest of the app and forces the rest of the app to avoid assuming how the Model works.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Spoilers:&lt;/strong&gt; This article will eventually discuss &amp;ldquo;leaky abstractions&amp;rdquo;. Avoiding leaky abstractions is the real reason why it&amp;rsquo;s so important for the non-Model components to carefully avoid assuming how the internals of the Model work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;there-s-an-app-for-that&#34;&gt;There&amp;rsquo;s an app for that&lt;/h2&gt;

&lt;p&gt;It turns out that I&amp;rsquo;ve already shared an example of a program that lacked Model and View separation. A few months ago, I &lt;a href=&#34;https://www.cocoawithlove.com/blog/porting-from-macos8-to-sierra.html&#34;&gt;shared my &amp;ldquo;Mines&amp;rdquo; code from nearly 20 years ago&lt;/a&gt;. However the use of 90s era Classic MacOS C++ in that implementation gets in the way of a proper in-depth discussion. So I took a couple hours and implemented a streamlined version as an Swift iOS app.&lt;/p&gt;

&lt;p&gt;I present the end result, totally devoid of any Model separation, &lt;a href=&#34;https://github.com/mattgallagher/CwlWorstPossibleApplication&#34;&gt;Mines for iOS&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.cocoawithlove.com/assets/blog/mines_screenshot.png&#34; alt=&#34;Figure 1: Mines&#34; /&gt;
&lt;figcaption&gt;Mines for iOS&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;That seems about right: the worst possible application is a Minesweeper clone.&lt;/p&gt;

&lt;h2 id=&#34;a-quick-summary-of-the-app&#34;&gt;A quick summary of the app&lt;/h2&gt;

&lt;p&gt;The app&amp;rsquo;s content is the minefield. I&amp;rsquo;ve used 100 squares (intended to be presented in a 10 by 10 grid). Each square potentially contains one of the 15 mines, randomly distributed on new game and each square starts covered but can be manually flagged or uncovered.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s no other data &lt;em&gt;required&lt;/em&gt; by the app but I&amp;rsquo;ve chosen to cache the number of adjacent mines for each square and the number of non-mine squares remaining to be uncovered before the game is considered &amp;ldquo;won&amp;rdquo;. The app includes a &amp;ldquo;Flag mode&amp;rdquo; slider but its value is considered &amp;ldquo;transient view-state&amp;rdquo; and it is omitted from the Model.&lt;/p&gt;

&lt;p&gt;If the app had a separate Model, it would include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The 100 squares, each with &lt;code&gt;isMine&lt;/code&gt;, &lt;code&gt;adjacent&lt;/code&gt; and &lt;code&gt;covered&lt;/code&gt; values&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;nonMineSquaresRemaining&lt;/code&gt; count&lt;/li&gt;
&lt;li&gt;Functions to generate the squares for a new game (including &lt;code&gt;isMine&lt;/code&gt; distribution and &lt;code&gt;adjacent&lt;/code&gt; counts).&lt;/li&gt;
&lt;li&gt;A function to handle clicking on a square (which might uncover or flag the square and might need to update the &lt;code&gt;nonMineSquaresRemaining&lt;/code&gt; count).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, the app doesn&amp;rsquo;t have a separate Model because that would be too sensible.&lt;/p&gt;

&lt;h2 id=&#34;breaking-all-the-rules&#34;&gt;Breaking all the rules&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s look at what horrible things I&amp;rsquo;ve done by comparing against the rules I gave for a properly separated Model.&lt;/p&gt;

&lt;h3 id=&#34;1-model-must-be-encapsulated-and-must-not-reference-the-view-or-application-framework&#34;&gt;1. Model must be encapsulated and must not reference the view or application framework&lt;/h3&gt;

&lt;p&gt;Each of the &lt;code&gt;SquareView&lt;/code&gt; objects (instances of &lt;code&gt;UIButton&lt;/code&gt;) which represent the tiles in the game contains the following properties:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;covering&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Covering&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covered&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;isMine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;adjacent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is not a cached representation of state store in another location, this is the &lt;em&gt;only&lt;/em&gt; representation of the minefield, spread across the 100 different &lt;code&gt;UIButton&lt;/code&gt; subclass instances used to display the minefield.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s as big a violation of rule 1 as possible.&lt;/p&gt;

&lt;h3 id=&#34;2-the-model-interface-must-expose-actions-not-primitive-data-operations&#34;&gt;2. The Model interface must expose actions, not primitive data operations&lt;/h3&gt;

&lt;p&gt;The primary change that occurs during the game is updating state when a square is tapped. How does this change occur?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// In a function on the GameViewController...&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;squareViews&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covering&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uncovered&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In short: when a &lt;code&gt;SquareView&lt;/code&gt; is tapped, it sends its action to the &lt;code&gt;GameViewController&lt;/code&gt; which maintains an array of the &lt;code&gt;SquareView&lt;/code&gt; buttons that comprise the minefield. The &lt;code&gt;GameViewController&lt;/code&gt; reaches directly into the affected &lt;code&gt;SquareView&lt;/code&gt; and directly edits its &lt;code&gt;covering&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s as big a violation of rule 2 as possible.&lt;/p&gt;

&lt;h3 id=&#34;3-updates-may-occur-only-in-response-to-change-notifications-from-the-model&#34;&gt;3. Updates may occur only in response to change notifications from the Model&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s the code invoked when you click on a mine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;squareView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isMine&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;squareView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covering&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uncovered&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;nonMineSquaresRemaining&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;refreshSquaresToClear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;squareView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setNeedsDisplay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the &lt;code&gt;GameViewController&lt;/code&gt; changes either the &lt;code&gt;covering&lt;/code&gt; property on a &lt;code&gt;SquareView&lt;/code&gt; or the &lt;code&gt;nonMineSquaresRemaining&lt;/code&gt; value on itself, it must also call either &lt;code&gt;setNeedsUpdate&lt;/code&gt; on the &lt;code&gt;SquareView&lt;/code&gt; or &lt;code&gt;refreshSquaresToClear&lt;/code&gt; on itself to force a refresh.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s as big a violation of rule 3 as possible.&lt;/p&gt;

&lt;h2 id=&#34;how-horrible-is-the-result&#34;&gt;How horrible is the result?&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;GameViewController&lt;/code&gt; feels like two completely different classes smashed together – it&amp;rsquo;s clearly doing too many things.&lt;/p&gt;

&lt;p&gt;And the &lt;code&gt;SquareView&lt;/code&gt; (a &lt;code&gt;UIButton&lt;/code&gt; subclass) contains &lt;code&gt;init(fromDictionary:)&lt;/code&gt; and &lt;code&gt;toDictionary()&lt;/code&gt; functions to aid serialization and deserialization during &lt;code&gt;UIStateRestoration&lt;/code&gt; – an assignment of responsibility that seems hilariously misplaced.&lt;/p&gt;

&lt;p&gt;But the app isn&amp;rsquo;t a complete mess. The underlying logic remains clear and simple and none of the work seems laborious or chaotic.&lt;/p&gt;

&lt;p&gt;I wanted a horror show but there&amp;rsquo;s nothing particularly horrific here. Maybe this experiment isn&amp;rsquo;t working.&lt;/p&gt;

&lt;h2 id=&#34;properly-separated-model-view-controller&#34;&gt;Properly separated Model-View-Controller&lt;/h2&gt;

&lt;p&gt;Perhaps I need a more direct comparison with a more typical Model-View-Controller implementation to really highlight what&amp;rsquo;s wrong here.&lt;/p&gt;

&lt;p&gt;For this implementation, &lt;a href=&#34;https://github.com/mattgallagher/CwlWorstPossibleApplication/tree/separated&#34;&gt;please look at the &amp;ldquo;separated&amp;rdquo; branch in the repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this version,  &lt;code&gt;Square&lt;/code&gt; and &lt;code&gt;Game&lt;/code&gt; are new types in the new &lt;a href=&#34;https://github.com/mattgallagher/CwlWorstPossibleApplication/blob/separated/CwlWorstPossibleApplication/Game.swift&#34;&gt;Game.swift file&lt;/a&gt;. &lt;code&gt;Game&lt;/code&gt; is the interface to the Model, its only mutating function is &lt;code&gt;tapSquare&lt;/code&gt; and changes must be observed through the &lt;code&gt;Game.changed&lt;/code&gt; notification.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Square&lt;/code&gt; contains the game-related data members that were previously on &lt;code&gt;SquareView&lt;/code&gt; and &lt;code&gt;Game&lt;/code&gt; contains the game-related data members that were previously on &lt;code&gt;GameViewController&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Square&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Codable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;covering&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Covering&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covered&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;isMine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;adjacent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Game&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Codable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;squares&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Square&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;nonMineSquaresRemaining&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;SquareView&lt;/code&gt; still contains the data it needs to draw itself but this data is now merely a &lt;em&gt;copy&lt;/em&gt; of the corresponding &lt;code&gt;Square&lt;/code&gt; value from the &lt;code&gt;Game&lt;/code&gt; object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SquareView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIButton&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;square&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Square&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;didSet&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;setNeedsDisplay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In addition to moving data members around, the following functions from &lt;code&gt;GameViewController&lt;/code&gt; were all moved to the &lt;code&gt;Game&lt;/code&gt; class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;loadGame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newSquareViews&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SquareView&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;remaining&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;newMineField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mineCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SquareView&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;uncover&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;squareViews&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SquareView&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;iterateAdjacent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;squareViews&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SquareView&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SquareView&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the button action method on &lt;code&gt;GameViewController&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kr&#34;&gt;@objc&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;squareTapped&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sender&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;has its contents moved to the &lt;code&gt;tapSquare&lt;/code&gt; function on the &lt;code&gt;Game&lt;/code&gt; class (this function is still called from the &lt;code&gt;squareTapped&lt;/code&gt; function on &lt;code&gt;GameViewController&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Since the &lt;code&gt;SquareView&lt;/code&gt; no longer contains the primary representation of the data, the &lt;code&gt;toDictionary()&lt;/code&gt; and &lt;code&gt;init(fromDictionary:)&lt;/code&gt; functions it contained are gone. The new &lt;code&gt;Game&lt;/code&gt; instance is compliant with Swift &lt;code&gt;Codable&lt;/code&gt; so serialization happens automatically on the Model.&lt;/p&gt;

&lt;p&gt;Finally, view updates are handled by making the &lt;code&gt;GameViewController&lt;/code&gt; observe changes on the &lt;code&gt;Game&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;NotificationCenter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addObserver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;#selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gameChanged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:)),&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Game&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;changed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newGame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;what-does-the-comparison-reveal&#34;&gt;What does the comparison reveal?&lt;/h2&gt;

&lt;p&gt;There are a handful of minor functionality changes but &lt;strong&gt;the biggest change is that code has moved around&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;At first glance, that seems fairly underwhelming – fixing the worst mistake in application design merely involves moving some code around. Surely a little code organization isn&amp;rsquo;t really that important?&lt;/p&gt;

&lt;h3 id=&#34;i-m-a-liar&#34;&gt;I&amp;rsquo;m a liar&lt;/h3&gt;

&lt;p&gt;Before I answer why this is important, I should also be more honest. While &amp;ldquo;moving some code around&amp;rdquo; is the superficial effect, there was more work involved. Specifically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I identified the Model data&lt;/li&gt;
&lt;li&gt;I identified all functions that acted purely on Model data&lt;/li&gt;
&lt;li&gt;I created a system of notifications for outputting the Model data&lt;/li&gt;
&lt;li&gt;I ensured that the functions and notifications provided a simple way to interact with the Model&lt;/li&gt;
&lt;li&gt;I implemented an interface around this entire concept.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s difficult to see all of this work from a side-by-side analysis though because &lt;strong&gt;I had already done most of it in the unseparated version of the app&lt;/strong&gt;. The idea of separating a Model is so ingrained in my head that I had created a de facto Model even when trying to avoid it.&lt;/p&gt;

&lt;p&gt;To highlight this instinctive separation, I reordered the functions on the &lt;code&gt;GameViewController&lt;/code&gt;. &lt;a href=&#34;https://github.com/mattgallagher/CwlWorstPossibleApplication/blob/master/CwlWorstPossibleApplication/GameViewController.swift&#34;&gt;Look at GameViewController.swift in the unseparated version of the Mines app&lt;/a&gt; and you&amp;rsquo;ll see that everything above line 101 of the &lt;code&gt;GameViewController&lt;/code&gt; is strictly Model code. It isn&amp;rsquo;t separated out into another class but it isn&amp;rsquo;t directly mingled with view code either.&lt;/p&gt;

&lt;p&gt;Even while writing this article, when I gave a &amp;ldquo;A quick summary of the app&amp;rdquo;, I spent the entire time describing the &lt;em&gt;Model&lt;/em&gt;, even though the app didn&amp;rsquo;t technically have a Model at that point.&lt;/p&gt;

&lt;p&gt;So yes, the code comparison mostly shows moving code around but that&amp;rsquo;s really just making the organization reflect what I&amp;rsquo;d already written – a de facto (if mingled and obscured) abstraction of the game&amp;rsquo;s data and logic.&lt;/p&gt;

&lt;h3 id=&#34;the-model-as-an-abstraction&#34;&gt;The Model as an abstraction&lt;/h3&gt;

&lt;p&gt;The separated Model implementation of the app clarifies the abstraction offered by the Model and strictly enforces it.&lt;/p&gt;

&lt;p&gt;By abstraction, I mean that the &lt;code&gt;Game&lt;/code&gt; interface performs a lot of hidden work internally but externally it appears quite simple. It exposes two non-private functions – &lt;code&gt;init&lt;/code&gt; and &lt;code&gt;tapSquare&lt;/code&gt; – that match the two sole means of interaction available to the user during the game (starting a new game and tapping on a square). The output from the &lt;code&gt;Game&lt;/code&gt; is the minefield state communicated through the &lt;code&gt;Game.changed&lt;/code&gt; notification.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Game&lt;/code&gt; abstraction simplifies 100 lines of code to construct and maintain the game down to 2 actions and 1 output. While there&amp;rsquo;s some work to correctly observe the notification output (roughly 10 lines in the &lt;code&gt;GameViewController&lt;/code&gt;), this abstraction still represents a significant code size and complexity reduction from the perspective of the &lt;code&gt;GameViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is the importance of having a Model in your application design pattern: it allows you to reduce complexity by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reducing steps required in the rest of the program&lt;/li&gt;
&lt;li&gt;removing the need to ensure correctness from the rest of the program&lt;/li&gt;
&lt;li&gt;removing the need for action locations to know about state observing locations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s important to have the Model be a freely chosen abstraction because the Controller and View are not. &lt;code&gt;UIViewController&lt;/code&gt; and &lt;code&gt;UIView&lt;/code&gt; subclasses are collections of functionality, largely dictated by the implementation constraints and requirements of the UIKit framework. They&amp;rsquo;re not free to model an arbitrary abstraction. The Model is valuable because it is an application framework independent component.&lt;/p&gt;

&lt;h3 id=&#34;leaky-and-bad-abstractions&#34;&gt;Leaky and bad abstractions&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve already argued that there was a de facto Model abstraction being used &lt;em&gt;before&lt;/em&gt; I officially separated the Model. However, an abstraction only works to reduce complexity when steps are taken to avoid outside components assuming its inner workings – the de facto abstraction offered no real hiding or shielding of its implementation.&lt;/p&gt;

&lt;p&gt;When outside components assume the inner workings of an abstraction, we call the abstraction a &amp;ldquo;leaky&amp;rdquo; abstraction. If there are &lt;em&gt;no&lt;/em&gt; hidden workings of the interface then it isn&amp;rsquo;t really an abstraction at all.&lt;/p&gt;

&lt;p&gt;For example, imagine that when I separated the Model, I hadn&amp;rsquo;t moved all the functions into the &lt;code&gt;Game&lt;/code&gt; structure, I merely moved the data members and exposed them as mutable properties:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Game&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Codable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;squares&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Square&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;nonMineSquaresRemaining&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If this was the entire Model definition, all of the work to maintain it would remain on the &lt;code&gt;GameViewController&lt;/code&gt;, exactly as before. This non-abstracted Model interface wouldn&amp;rsquo;t offer any benefit to the program.&lt;/p&gt;

&lt;h3 id=&#34;application-design-patterns-are-potentially-useless&#34;&gt;Application design patterns are potentially useless&lt;/h3&gt;

&lt;p&gt;This is why I have problems unambiguously discussing application design patterns. A Model &lt;em&gt;should&lt;/em&gt; provide an abstraction, it &lt;em&gt;should&lt;/em&gt; reduce complexity and improve locality of your code and logic. But whether it actually helps is dependent on your implementation. If you choose a useless abstraction for your Model then there&amp;rsquo;s potentially no benefit to having it separated.&lt;/p&gt;

&lt;p&gt;Application design patterns don&amp;rsquo;t provide implementations, they merely suggest some components – which on their own are completely useless. It&amp;rsquo;s the programmer&amp;rsquo;s responsibility to use good abstractions where possible for these components. Following a good application design pattern &lt;em&gt;should&lt;/em&gt; lead to good abstractions but it doesn&amp;rsquo;t just magically happen.&lt;/p&gt;

&lt;p&gt;A useful way to think about application design patterns is as a thought experiment which challenges us to explain our program from different perspectives. An application design pattern poses the question: if you were forced to route updates or actions in your program through an interface between these components, how would you explain your program&amp;rsquo;s state and behavior at that boundary? The question encourages an abstraction of the requirements and available options at a specific vantage point. Whether considering that perspective leads to a clean, simple abstraction of your program&amp;rsquo;s behavior will determine whether that application design pattern is beneficial for your program.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Depending on your Model abstraction, either of the following might be true:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Separating the Model from the View mostly just moves code around.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Separating the Model from the View reduces overall implementation complexity through careful abstraction, better separation of concerns, better code locality and simpler propagation of data dependencies.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In fact, both of these statements could be descriptions of the &lt;em&gt;same&lt;/em&gt; program, as in the case of the &lt;a href=&#34;https://github.com/mattgallagher/CwlWorstPossibleApplication&#34;&gt;Mines app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Writing an application without a separated Model is considered the worst application design, not because it immediately leads to disaster but because it indicates that you&amp;rsquo;ve never tried to clearly isolate what your program &lt;em&gt;does&lt;/em&gt;. We don&amp;rsquo;t write applications because we love constructing views and controllers – these are merely a means to an end. We write applications to present our Model, perform actions on it and view the results.&lt;/p&gt;

&lt;p&gt;The worst possible application design is one that doesn&amp;rsquo;t understand what the app &lt;em&gt;is&lt;/em&gt; and obscures its own nature by scattering it around arbitrarily.&lt;/p&gt;

&lt;h3 id=&#34;looking-forward&#34;&gt;Looking forward&lt;/h3&gt;

&lt;p&gt;The Model-View-Controller pattern typically describes the Model as containing all the data in the application and the View as a mere a display of that data. However, there is often data that affects the display of a View – like scroll state, navigation state or uncommitted data entry fields – that exists only in the View and not in the Model, in apparent violation of the Model-View-Controller principles.&lt;/p&gt;

&lt;p&gt;In the next article, I&amp;rsquo;ll look at what happens when we require this view-state to pass through its own Model and how this view-state can drive the entire application.&lt;/p&gt;
&lt;br/&gt;Copyright Matt Gallagher, 2018. All rights reserved. Code samples may be use in accordance with the ISC-style license at https://www.cocoawithlove.com/about.html</description>
    </item>
    
    <item>
      <title>CwlLayout: a Swift wrapper around Auto Layout</title>
      <link>https://www.cocoawithlove.com/blog/cwllayout.html</link>
      <pubDate>Thu, 03 Aug 2017 01:08:27 +1000</pubDate>
      
      <guid>https://www.cocoawithlove.com/blog/cwllayout.html</guid>
      <description>

&lt;p&gt;Cocoa&amp;rsquo;s Auto Layout is an effective constraints system but as an API for &amp;ldquo;layout&amp;rdquo;, it leaves a lot to be desired. In most respects, Auto Layout is a constraints API upon which we can &lt;em&gt;build&lt;/em&gt; a layout system but is not itself an API that offers layout.&lt;/p&gt;

&lt;p&gt;In this article, I&amp;rsquo;m going to look at why using Auto Layout directly can be frustrating or limiting, before showing my own CwlLayout code which is a thin layer over Auto Layout (for either iOS or macOS) that I use to make layout less laborious and less error prone.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can &lt;a href=&#34;https://github.com/mattgallagher/CocoaWithLovePlaygrounds&#34;&gt;download this article as a Swift Playground&lt;/a&gt; from github.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;declarative-programming&#34;&gt;Declarative programming&lt;/h2&gt;

&lt;p&gt;Declarative programming is about describing a program as a set of rules and relationships. Syntactically, declarative programming is often about assembling a whole system of rules as either a single expression or domain-specific language whose structure reflects the relationship between the rules in the system.&lt;/p&gt;

&lt;p&gt;Layout is an inherently declarative task. Layout is a set of rules (which Auto Layout calls &amp;ldquo;constraints&amp;rdquo;) that apply to the contents of a view, ideally for the entire lifetime of the contents. Constraint programming itself is sometimes considered a subdiscipline of declarative programming.&lt;/p&gt;

&lt;p&gt;Unfortunately, despite Auto Layout modelling a declarative system, it doesn&amp;rsquo;t offer a very declarative API. There are a handful of ways to use Auto Layout but none can be written as a single expression, most require a number of mutable property changes and in many cases, multiple constraints must applied at separate times.&lt;/p&gt;

&lt;p&gt;The end result is unaesthetic code that is inconsistent by default. In fact, since each view requires 4 separate constraints (width, height, x-placement, y-placement), any arbitrary set of Auto Layout constraints is far more likely to be inconsistent than consistent – and an inconsistent system of rules is no system at all.&lt;/p&gt;

&lt;h2 id=&#34;an-example-layout&#34;&gt;An example layout&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s look at a &amp;ldquo;simple&amp;rdquo; layout example to see what I mean. All of the examples in this article construct the following layout:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.cocoawithlove.com/assets/blog/basic_layout.png&#34; alt=&#34;Figure 1: a simple layout involving two bottom-aligned labels&#34; /&gt;
&lt;figcaption&gt;Figure 1: a simple layout involving two bottom-aligned labels&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;This layout contains two &lt;code&gt;UILabel&lt;/code&gt;s and the gray area is the boundary of the container &lt;code&gt;UIView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The layout aligns the bottom edges of the two &lt;code&gt;UILabel&lt;/code&gt;s, makes both labels the same width and places both within the parent view so that the tallest touches the upper margin of the view, the left and right labels touch the left and right margins, the labels are horizontally separated by a margin width and the bottom of the view is left vacant.&lt;/p&gt;

&lt;p&gt;A key point to note about this layout is that it doesn&amp;rsquo;t encode the height of either label. If the text changed the labels would adjust their heights, possibly changing which label touches the top margin and possibly changing how much of the view is left vacant at the bottom but they would maintain their equal widths and maintain their aligned bottom edge.&lt;/p&gt;

&lt;h2 id=&#34;manually-applied-constraints&#34;&gt;Manually applied constraints&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s see how this looks using manually applied constraints:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UIKit&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PlaygroundSupport&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;example1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UILabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UILabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
   &lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addSubview&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addSubview&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;constraints&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;leadingAnchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;equalTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layoutMarginsGuide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;leadingAnchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
      &lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trailingAnchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;equalTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layoutMarginsGuide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trailingAnchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
      &lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bottomAnchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;equalTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bottomAnchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
      &lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trailingAnchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;equalTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;leadingAnchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
      &lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topAnchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;greaterThanOrEqualTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layoutMarginsGuide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topAnchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
      &lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topAnchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;greaterThanOrEqualTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layoutMarginsGuide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topAnchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
      &lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;widthAnchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;equalTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;widthAnchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constraints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;leftTop&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topAnchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;equalTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layoutMarginsGuide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topAnchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;leftTop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;priority&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LayoutDimension&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PriorityDefaultLow&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;leftTop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isActive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rightTop&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topAnchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;equalTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layoutMarginsGuide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topAnchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;rightTop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;priority&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LayoutDimension&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PriorityDefaultLow&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;rightTop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isActive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;view1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;runExample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reversed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;example1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; if you&amp;rsquo;re viewing this in the &lt;a href=&#34;https://github.com/mattgallagher/CocoaWithLovePlaygrounds&#34;&gt;Swift Playground&lt;/a&gt;, the last &lt;code&gt;let view1 =&lt;/code&gt; line will have a gray &amp;ldquo;Show Result&amp;rdquo; square in the right margin. Click this square to view the layout. Set the &lt;code&gt;reversed&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; to swap the labels on the text fields.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The clear problem here is the raw volume of code. I&amp;rsquo;ve had to write nine separate constraints, set a handful of properties and other actions including adding subviews and activating constraints. It&amp;rsquo;s a &lt;em&gt;lot&lt;/em&gt; of unforgiving, meticulous work. Omitting any line will not merely change the layout but is likely to leave the layout in one of the following four problematic states:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;inconsistent (no single solution that satisfies all constraints)&lt;/li&gt;
&lt;li&gt;ambiguous (more than one solution that satisfies all constraints)&lt;/li&gt;
&lt;li&gt;overlapping (views partially or completely occupying the same space, unintentionally)&lt;/li&gt;
&lt;li&gt;overflowing (views exceeding the bounds of the parent, unintentionally)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These problems will not manifest as compile-time errors that clearly say &amp;ldquo;fix this line&amp;rdquo;, they are runtime errors which may give confusing or difficult to understand results. Even if you get information in the console about reporting &amp;ldquo;ambiguous layout affecting height of view [x]&amp;ldquo;, it can be very difficult to go back to your mess of constraints and find where you&amp;rsquo;ve gone wrong.&lt;/p&gt;

&lt;p&gt;Constraints are hard.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Brain teaser&lt;/strong&gt;: one (and only one) of the 9 constraints can be removed without leaving the layout in one of the four problematic states listed, above. Can you guess which one?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Much of the debate I see around Auto Layout focusses on how it&amp;rsquo;s cumbersome to implement in code (as opposed to Interface Builder) but all of these 9 constraints would still need to be applied in Interface Builder to achieve this layout and you&amp;rsquo;d still need to understand &lt;em&gt;why&lt;/em&gt; each of the constraints is necessary.&lt;/p&gt;

&lt;p&gt;Interface Builder can give more immediate feedback when the layout is ambiguous or inconsistent but it doesn&amp;rsquo;t change the number of constraints you&amp;rsquo;ll need to create or the need guess, from messages like &amp;ldquo;ambiguous layout affecting height of view [x]&amp;ldquo;, where you may have made a mistake. You need a deep understanding of the constraints system to avoid misuse and while it&amp;rsquo;s not rocket science, it can still be confusing.&lt;/p&gt;

&lt;h2 id=&#34;pseudo-layouts&#34;&gt;Pseudo-layouts&lt;/h2&gt;

&lt;p&gt;The problems with manually applied constraints stem from the fact that views require at least 4 constraints at any time (width, height, x-placement, y-placement) but the API applies 1 rule at a time. Ensuring the set of rules is consistent requires knowledge about the desired end-effect. Columns? Rows? Aspect ratio sizing?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try another approach – the Auto Layout &lt;code&gt;constraints(withVisualFormat:...&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Ostensibly, the purpose of this function is to provide better visualization of constraints but it has a much greater advantage: geometry. The &lt;code&gt;constraints(withVisualFormat:...&lt;/code&gt; function partially models a column or row so it can determine which additional constraints might be required to ensure alignment within the column or row and ordering of items from end-to-end.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how it plays out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;example2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UILabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UILabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
   &lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addSubview&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addSubview&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;views&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;right&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;constraints1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constraints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withVisualFormat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;s&#34;&gt;&amp;#34;|-[left]-[right(==left)]-|&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alignAllBottom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;views&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;views&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;constraints2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constraints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withVisualFormat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;s&#34;&gt;&amp;#34;V:|-(&amp;gt;=8)-[left]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;views&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;views&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;constraints3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constraints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withVisualFormat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;s&#34;&gt;&amp;#34;V:|-(&amp;gt;=8)-[right]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;views&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;views&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constraints1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constraints2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constraints3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;view2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;runExample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reversed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;example2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s a lot shorter but it&amp;rsquo;s still precarious. While impossible constraints are  less common, ambiguous layouts are still possible due to the fact that the modelling is primarily 1-dimensional but constraints must agree in two dimensions.&lt;/p&gt;

&lt;p&gt;There also remain numerous esoteric requirements like the &amp;ldquo;greater or equal&amp;rdquo; vertical spacing constraint that could easily be misapplied, creating problems in this type of layout.&lt;/p&gt;

&lt;h2 id=&#34;an-actual-layout&#34;&gt;An actual layout&lt;/h2&gt;

&lt;p&gt;No matter how you apply them, constraints are not layouts; constraints are building blocks from which we can &lt;em&gt;make&lt;/em&gt; layouts. An actual layout requires starting a different way.&lt;/p&gt;

&lt;p&gt;UIKit and AppKit provide &lt;code&gt;UIStackView&lt;/code&gt;/&lt;code&gt;NSStackView&lt;/code&gt;. Let&amp;rsquo;s take a look:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;example3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UILabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UILabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIStackView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arrangedSubviews&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alignment&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bottom&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spacing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
   
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;topAlignedBox&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIStackView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arrangedSubviews&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;topAlignedBox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alignment&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;top&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;topAlignedBox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;autoresizingMask&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flexibleWidth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flexibleHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;topAlignedBox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frame&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bounds&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;topAlignedBox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isLayoutMarginsRelativeArrangement&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;topAlignedBox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preservesSuperviewLayoutMargins&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addSubview&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topAlignedBox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;view3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;runExample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reversed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;example3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using a &lt;code&gt;UIStackView&lt;/code&gt; is vastly better than raw constraints. &lt;code&gt;UIStackView&lt;/code&gt; distributes views equally along its axis – which happens to be the arrangement I&amp;rsquo;ve used in this article – and most of the properties on the stack view can simply be omitted and the layout would not be ambiguous, inconsistent, overlapping or overflowing.&lt;/p&gt;

&lt;p&gt;However, there are a few problems:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There are still properties whose configuration can&amp;rsquo;t be omitted&lt;/li&gt;
&lt;li&gt;Stack view can&amp;rsquo;t be configured in a single expression&lt;/li&gt;
&lt;li&gt;Stack view is relatively inflexible&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On the first problem: you need to correctly place the outer stack view in the view or &lt;em&gt;nothing&lt;/em&gt; will appear. Delete the &lt;code&gt;frame&lt;/code&gt; line to see what happens. The &lt;code&gt;autoresizingMask&lt;/code&gt; can also be problematic if the container view needs to resize.&lt;/p&gt;

&lt;p&gt;On the second problem: you can see in the example that I had to nest one stack view within another to achieve the correct layout. Nested layers is not a problem but since stack views can&amp;rsquo;t be fully configured in a single expression, the implementation grows increasingly messy as we need to assign all the stack views to variables, configure them and finally assemble them.&lt;/p&gt;

&lt;p&gt;On the third point: unless you resort to adding bare constraints (the very situation we&amp;rsquo;re trying to avoid) it can be difficult to control the widths of items in a Stack View row or the heights in a Stack View column. Supposedly, &lt;code&gt;UIStackView&lt;/code&gt; scales based on compression resistance and hugging priority but I was not able to use these values to tweak the sizes of the child views.&lt;/p&gt;

&lt;h2 id=&#34;cwllayout&#34;&gt;CwlLayout&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;UIStackView&lt;/code&gt;/&lt;code&gt;NSStackView&lt;/code&gt; provide a good conceptual model for layout but their implementation is lacking.&lt;/p&gt;

&lt;p&gt;A declarative approach – where the whole system of constraints is established in a single expression – would be much better. Fortunately, Swift has a number of syntactic advantages that can help us, here. Swift has:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;enums with associated types&lt;/li&gt;
&lt;li&gt;dot lookup of static members on a type&lt;/li&gt;
&lt;li&gt;typesafe variable argument lists&lt;/li&gt;
&lt;li&gt;parameters with default arguments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By using these, we can write code that is close to a structured declarative language-within-a-language for specifying layout.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;example4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UILabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UILabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;applyLayout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;horizontal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;align&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;leading&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;horizontal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;align&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trailing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;matchedPair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;view4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;runExample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reversed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;example4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Conceptually, this uses the same approach as the previous &lt;code&gt;UIStackView&lt;/code&gt; example: we have a row containing a pair of views aligned to the bottom edge inside another box aligned to the top (alignment here is perpendicular to the layout direction so the &lt;code&gt;align&lt;/code&gt; parameters &lt;code&gt;.leading&lt;/code&gt; and &lt;code&gt;.trailing&lt;/code&gt; are interpreted as &amp;ldquo;vertically leading&amp;rdquo; – i.e. top – and &amp;ldquo;vertically trailing&amp;rdquo; – i.e. bottom).&lt;/p&gt;

&lt;p&gt;Compared to &lt;code&gt;UIStackView&lt;/code&gt; though, this example is more syntactically efficient, has a visual structure that reflects its compositional structure, is a single expression and is inherently consistent.&lt;/p&gt;

&lt;p&gt;That last point might be the most important: you can remove subviews entirely from the hierarchy but there is nothing you can remove that leaves the layout in an inconsistent, ambiguous, overlapping or overflowing state. Don&amp;rsquo;t misunderstand me: you can still &lt;em&gt;add&lt;/em&gt; inconsistent constraints with CwlLayout but you need to take positive action to &lt;em&gt;introduce&lt;/em&gt; inconsistency – the system is consistent by default.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll notice too that there&amp;rsquo;s no need to add subviews or configure other properties on the views like &lt;code&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt;. It is all handled automatically. Additionally, a subsequent call to &lt;code&gt;applyLayout&lt;/code&gt; (including &lt;code&gt;applyLayout(nil)&lt;/code&gt;) will precisely remove any previously applied layout, the constraints applied by the layout and any added subviews (leaving views and constraints added by other means untouched). Everything is done in a single operation.&lt;/p&gt;

&lt;h2 id=&#34;some-variations&#34;&gt;Some variations&lt;/h2&gt;

&lt;h3 id=&#34;custom-size-constraints&#34;&gt;Custom size constraints&lt;/h3&gt;

&lt;p&gt;I mentioned that one of the drawbacks to &lt;code&gt;UIStackView&lt;/code&gt; is that it can be difficult to control the size of contained items – the stack view applies its own sizing logic which is opaque and difficult to override.&lt;/p&gt;

&lt;p&gt;For example, imagine instead of this &lt;sup&gt;50&lt;/sup&gt;&amp;frasl;&lt;sub&gt;50&lt;/sub&gt; split, we wanted a &lt;sup&gt;75&lt;/sup&gt;&amp;frasl;&lt;sub&gt;25&lt;/sub&gt; split. With CwlLayout, it&amp;rsquo;s simple to use a &lt;code&gt;sizedView&lt;/code&gt; (one which includes explicit size constraints):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;example5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UILabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UILabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;applyLayout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;horizontal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;align&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;leading&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;horizontal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;align&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trailing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sizedView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lengthEqualTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ratio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.75&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.75&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interViewSpace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;view5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;runExample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reversed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;example5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;0.75&lt;/code&gt; ratio is a ratio of the parent container – i.e. the inner &lt;code&gt;.horizontal&lt;/code&gt; layout, which the outer &lt;code&gt;.horizontal&lt;/code&gt; layout has already inset by the view&amp;rsquo;s margins. However, we also want to leave space for the 8 pixel space between the two labels, hence the &lt;code&gt;-0.75 * 8&lt;/code&gt; constant which is subtracted from the width, leaving a perfect 3:1 ratio between the two labels.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;8 unit space&amp;rdquo; is created by &lt;code&gt;interViewSpace&lt;/code&gt;, equivalent to &lt;code&gt;.space(8.0)&lt;/code&gt;. CwlLayout included an &lt;code&gt;interViewSpace&lt;/code&gt; automatically between the &lt;code&gt;matchedPair&lt;/code&gt; in the previous example but since we&amp;rsquo;re managing the row more manually this time, it&amp;rsquo;s been explicitly included. This 8 unit separation is a standard space that Apple suggests for container margins and spacing between adjacent views.&lt;/p&gt;

&lt;p&gt;Note however that &lt;code&gt;UIViewController&lt;/code&gt; has very different margins and the &lt;code&gt;safeAreaGuides&lt;/code&gt; in iOS 11 are different again. CwlLayout respects margins by default on the outermost layout container and there&amp;rsquo;s a &lt;code&gt;marginEdges&lt;/code&gt; parameter (hidden in this example) that lets you toggle each margin edge between safe-area, layout margins and no margins.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also possible to specify the &lt;code&gt;breadth&lt;/code&gt; (size perpendicular to layout direction). If the &lt;code&gt;breadth&lt;/code&gt; is specified as a ratio, it can be a ratio of the parent container or a ratio of the &lt;code&gt;length&lt;/code&gt; so aspect ratio preserving sizing is possible.&lt;/p&gt;

&lt;h3 id=&#34;controlling-vertical-placement&#34;&gt;Controlling vertical placement&lt;/h3&gt;

&lt;p&gt;The two previous examples have used nested &lt;code&gt;.horizontal&lt;/code&gt; rows (because it&amp;rsquo;s what I used in the &lt;code&gt;UIStackView&lt;/code&gt; example) but I could just as easily change the outer container to a column and start controlling vertical placement:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;example6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UILabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UILabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;applyLayout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vertical&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;space&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;equalTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ratio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;horizontal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;align&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trailing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;matchedPair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;space&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fillRemaining&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;view6&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;runExample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reversed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;example6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/mattgallagher/CocoaWithLovePlaygrounds/blob/master/CwlLayout.playground/Sources/CwlLayout.swift&#34;&gt;CwlLayout.swift file&lt;/a&gt; is available in the &lt;a href=&#34;https://github.com/mattgallagher/CocoaWithLovePlaygrounds/tree/master/CwlLayout.playground/Sources&#34;&gt;Sources folder&lt;/a&gt; of the &lt;a href=&#34;https://github.com/mattgallagher/CocoaWithLovePlaygrounds&#34;&gt;Swift Playground for this article&lt;/a&gt;. The file has no dependencies beyond AppKit/UIKit so you can just drop it into any of your projects.&lt;/p&gt;

&lt;p&gt;CwlLayout supports deployment targets of macOS 10.11, iOS 9 and later.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Swift 4 and iOS 11/macOS 10.13&lt;/strong&gt;: If you&amp;rsquo;re building with Swift 4, then you &lt;em&gt;must&lt;/em&gt; use the iOS 11 or macOS 10.13 SDK. If you&amp;rsquo;re building with Swift 3.2 or lower, then you must use the iOS 10 or macOS 10.12 SDK. I don&amp;rsquo;t like tying the Swift version and SDK versions together like this but I&amp;rsquo;m not sure how else to handle the changes in the SDK overlay.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The file lacks full test coverage so there may be some rough edges. If you encounter any obvious bugs, let me know.&lt;/p&gt;

&lt;p&gt;At the moment, CwlLayout does not support animation. It would be nice to animate from one arrangement to another but that&amp;rsquo;s a task for the future. Support for text baseline alignment is also not yet implemented.&lt;/p&gt;

&lt;p&gt;If you look at the code, you&amp;rsquo;ll notice that there&amp;rsquo;s a &lt;code&gt;DEBUG&lt;/code&gt; setting in there. For many tasks, CwlLayout uses &lt;code&gt;UILayoutGuide&lt;/code&gt;/&lt;code&gt;NSLayoutGuide&lt;/code&gt; to define regions but a compile condition will switch these guides to &lt;code&gt;UIView&lt;/code&gt;/&lt;code&gt;NSView&lt;/code&gt; instead since views show up better in the debugging tools in Xcode.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Using Auto Layout constraints directly is an exercise in frustration. They are inconsistent by default and errors won&amp;rsquo;t be caught by the compiler, so runtime problems are a continual issue. The fact that the code is often unaesthetic and uncomposeable adds to the frustration.&lt;/p&gt;

&lt;p&gt;Apple&amp;rsquo;s documentation and videos focus on using Auto Layout in Interface Builder, which avoids the aesthetics of the code but the fact remains that even in Interface Builder, you&amp;rsquo;re still just applying the same independent constraints and it&amp;rsquo;s still prone to being inconsistent if you&amp;rsquo;re not precise and accurate.&lt;/p&gt;

&lt;p&gt;A far better solution for programming a declarative constraints system is to use an API that itself is declarative and builds the whole system as a single composeable expression and rather than constructing individual constraints separately. An approach that understands the whole system and can automatically include constraints needed will also aid consistency.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;UIStackView&lt;/code&gt; or &lt;code&gt;NSStackView&lt;/code&gt; gets part of the way towards this ideal. These classes understand the overall layout and limit the amount of inconsistency but they are relatively inflexible and typically require multiple statements to configure.&lt;/p&gt;

&lt;p&gt;CwlLayout isn&amp;rsquo;t complicated or revolutionary; it is just a more-flexible column and row approach like &lt;code&gt;UIStackView&lt;/code&gt; or &lt;code&gt;NSStackView&lt;/code&gt;. Unlike &lt;code&gt;UIStackView&lt;/code&gt; or &lt;code&gt;NSStackView&lt;/code&gt; however, it is designed exclusively for Swift and takes advantage of Swift&amp;rsquo;s syntactic efficiency for a more aesthetic design.&lt;/p&gt;

&lt;h3 id=&#34;looking-forward&#34;&gt;Looking forward&amp;hellip;&lt;/h3&gt;

&lt;p&gt;Layout is just the tip of the iceberg.&lt;/p&gt;

&lt;p&gt;Almost all app development – windows, views, controls, buttons, actions, fonts – can be handled as a set of rules. Some rules determine the mapping between model and display and some dictate how events and user-actions should be routed and handled.&lt;/p&gt;

&lt;p&gt;How would a declarative approach for an entire app look?&lt;/p&gt;
&lt;br/&gt;Copyright Matt Gallagher, 2018. All rights reserved. Code samples may be use in accordance with the ISC-style license at https://www.cocoawithlove.com/about.html</description>
    </item>
    
    <item>
      <title>An aside about flatMap and monads</title>
      <link>https://www.cocoawithlove.com/blog/an-aside-about-flatmap-and-monads.html</link>
      <pubDate>Fri, 30 Jun 2017 00:00:22 +1000</pubDate>
      
      <guid>https://www.cocoawithlove.com/blog/an-aside-about-flatmap-and-monads.html</guid>
      <description>

&lt;p&gt;In the &lt;a href=&#34;https://www.cocoawithlove.com/blog/statements-messages-reducers.html&#34;&gt;previous article&lt;/a&gt;, I used a Swift function named &lt;code&gt;flatMap&lt;/code&gt;. There are three kinds of function named &lt;code&gt;flatMap&lt;/code&gt; in the Swift standard library but I used the one that is the least monadic.&lt;/p&gt;

&lt;p&gt;Discussing the monad-ish-ness of &lt;code&gt;flatMap&lt;/code&gt; in Swift is a weird thing to do. Swift doesn&amp;rsquo;t use the word &amp;ldquo;monad&amp;rdquo; anywhere in its documentation so monads are far from fundamental to Swift.&lt;/p&gt;

&lt;p&gt;Yet monads are essential in some programming languages. Reprising the previous article&amp;rsquo;s topic of &amp;ldquo;units of computation&amp;rdquo;, monads are a fundamental unit of computation in Haskell. Influence from Haskell may leave Swift programmers curious about monads wondering if they too should try to use them more often in their programs.&lt;/p&gt;

&lt;p&gt;In this article, I&amp;rsquo;ll look at monads; what they are, why they&amp;rsquo;re fundamental in Haskell, whether &lt;code&gt;flatMap&lt;/code&gt; is necessarily a monad and the importance in Swift of constructs that are monad-ish but not strictly monadic.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-is-a-monad&#34;&gt;What is a monad?&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;monad&lt;/strong&gt; is a &amp;ldquo;container&amp;rdquo; type (like &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Optional&lt;/code&gt;, etc) that is acted upon through a particular transformation called &lt;strong&gt;bind&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The bind transformation is not very complicated but it involves an intermediate step which can make it all seem a little abstract. Here&amp;rsquo;s a diagram to try and make it easier to picture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.cocoawithlove.com/assets/blog/monad.svg&#34; alt=&#34;Figure 1: a diagram of a monadic bind transformation&#34; /&gt;&lt;/p&gt;

&lt;figcaption&gt;A dataflow diagram of a typical monadic bind transformation&lt;/figcaption&gt;

&lt;p&gt;A bind operation does the following (as shown by the red circles in the diagram):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;takes a container that can contain zero or more instances, e.g. &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;takes a function which transforms an instance of the contained type from (1) into a new container of the same &lt;em&gt;kind&lt;/em&gt; as in (1) containing zero or more new instances of a potentially new type, e.g. &lt;code&gt;(T)-&amp;gt; Box&amp;lt;U&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;applies the function from (2) to each of the contained instances from (1)&lt;/li&gt;
&lt;li&gt;concatenates all containers produced by (3) into a single container, e.g. &lt;code&gt;(Box&amp;lt;Box&amp;lt;U&amp;gt;&amp;gt;) -&amp;gt; Box&amp;lt;U&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A fully conforming monad places a few additional requirements on the container type and the concatenate step but these requirements are not really relevant to understanding monads so I&amp;rsquo;ll skip them.&lt;/p&gt;

&lt;p&gt;Instead, let&amp;rsquo;s take a quick step back and discuss the scenario in which we might need such a specific transformation.&lt;/p&gt;

&lt;h3 id=&#34;a-scenario-where-we-might-use-a-monad&#34;&gt;A scenario where we might use a monad&lt;/h3&gt;

&lt;p&gt;Imagine we have lots of functions that take plain, unwrapped inputs like &lt;code&gt;Int&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt; and these functions happen to return results wrapped in containers like &lt;code&gt;Optional&amp;lt;Double&amp;gt;&lt;/code&gt; or &lt;code&gt;Array&amp;lt;Character&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since our functions happen to return results in containers, we end up with a lot of containers.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s usually not a problem to go from unwrapped values to one layer of containment – a container may help us hold multiple values or remind us that an operation may have failed – but if we happened to apply a container-returning function once, we might want to applying another similar function again in the future. Suddenly &lt;code&gt;Optional&amp;lt;Double&amp;gt;&lt;/code&gt; becomes &lt;code&gt;Optional&amp;lt;Optional&amp;lt;Float&amp;gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;Array&amp;lt;Character&amp;gt;&lt;/code&gt; becomes &lt;code&gt;Array&amp;lt;Array&amp;lt;UnicodeScalar&amp;gt;&amp;gt;&lt;/code&gt; and now things start to get unwieldy.&lt;/p&gt;

&lt;p&gt;If we care about the end-results, not the structure in-between, then the bind transformation of a monad helps us repeatedly apply container-returning functions without needing increasingly deeper layers of wrapping around our results.&lt;/p&gt;

&lt;h2 id=&#34;why-do-haskell-programmers-care-so-much&#34;&gt;Why do Haskell programmers care so much?&lt;/h2&gt;

&lt;p&gt;If you didn&amp;rsquo;t realize from the explanation and the scenario: monads are fairly specific.&lt;/p&gt;

&lt;p&gt;A bind transformation can be useful in an imperative language but even in a situation ideally suited to monads, you might instinctively process things another way. You may just perform your own &lt;code&gt;for&lt;/code&gt; loop over the data and perform the concatenation yourself as you go. Or you could apply a post-processing &lt;code&gt;reduce&lt;/code&gt; step after the &lt;code&gt;map&lt;/code&gt; that does its own container unwrapping and concatenation.&lt;/p&gt;

&lt;p&gt;Why are monads so fundamental in Haskell?&lt;/p&gt;

&lt;p&gt;The answer is that it&amp;rsquo;s not &lt;em&gt;general&lt;/em&gt; monads that are useful in Haskell as much as &lt;em&gt;one-way&lt;/em&gt; monads – the IO monad in particular – and how they interact with the Haskell runtime system.&lt;/p&gt;

&lt;p&gt;In a strict functional programming language like Haskell, functions are not allowed to mutate state or have side effects. This complicates any interaction with the user, the file system, networking, the operating system or other services since &lt;em&gt;all&lt;/em&gt; of these interactions are stateful and have side effects.&lt;/p&gt;

&lt;p&gt;The way Haskell deals with these problems is that you can interact with these services freely but you never get access to the result. Instead, you get a container (an IO monad) that you can never unwrap. If you never unwrap a container containing side effects, then you remain free from the impact of those side effects – your actions remain the same regardless of whether the container holds a fully parsed data structure or a file-not-found error.&lt;/p&gt;

&lt;p&gt;How can you handle a container that you can never unwrap? With transformations like &lt;code&gt;map&lt;/code&gt;, of course. A &lt;code&gt;map&lt;/code&gt; transformation in Haskell is effectively your code telling the runtime system: please look inside the container for me and should the container contain a value, then apply this function.&lt;/p&gt;

&lt;p&gt;And since many of the functions you might apply in Haskell will themselves return IO monads, the bind transformation becomes useful so we can concatenate successful steps through our own program.&lt;/p&gt;

&lt;h2 id=&#34;monads-as-the-fundamental-unit-of-computation-in-haskell&#34;&gt;Monads as the fundamental &amp;ldquo;unit of computation&amp;rdquo; in Haskell&lt;/h2&gt;

&lt;p&gt;In short video on Microsoft&amp;rsquo;s Channel 9 titled &lt;a href=&#34;https://channel9.msdn.com/Blogs/Charles/Simon-Peyton-Jones-Towards-a-Programming-Language-Nirvana&#34;&gt;Towards a Programming Language Nirvana&lt;/a&gt; (from 2007), &lt;a href=&#34;https://en.wikipedia.org/wiki/Simon_Peyton_Jones&#34;&gt;Simon Peyton Jones&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Erik_Meijer_(computer_scientist)&#34;&gt;Erik Meijer&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Butler_Lampson&#34;&gt;Butler Lampson&lt;/a&gt; talk about how programming is fundamentally about doing work, creating output and having effects but – as the video explains – pure functional programming languages like Haskell are about &lt;em&gt;not&lt;/em&gt; having effects, rendering them useless.&lt;/p&gt;

&lt;p&gt;Peyton Jones is being facetious, of course, Haskell does have &lt;em&gt;some&lt;/em&gt; effects which Peyton Jones calls &amp;ldquo;controlled&amp;rdquo; effects. Haskell acheives these controlled effects by using the one-way nature of the IO monad to keep code and effects separated.&lt;/p&gt;

&lt;p&gt;Since the IO monad is the means by which Haskell controls effects, the IO monad is literally how you program in Haskell. Each IO monadic bind can be considered a single effect and the only way to build a series of effects (i.e. a program) is to have multiple IO monadic bind steps. In this way, the IO monad is literally the building block used to build Haskell programs. Haskell even offers special &lt;code&gt;do&lt;/code&gt; syntax for creating a function that is aesthetically a series of monadic bind steps so the aethetics of the program can match the procedural structure.&lt;/p&gt;

&lt;h2 id=&#34;swift-and-flatmap&#34;&gt;Swift and &lt;code&gt;flatMap&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s bring the discussion back to Swift.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve explained that a bind transformation is like a &lt;code&gt;map&lt;/code&gt; where the function it applies returns a container type and the monad transformation unwraps all the returned containers and concatenates them together.&lt;/p&gt;

&lt;p&gt;This is &lt;em&gt;close&lt;/em&gt; to the same description as some of the &lt;code&gt;flatMap&lt;/code&gt; functions in Swift:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Returns an array containing the concatenated results of calling the given transformation with each element of this sequence.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Sequence&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;flatMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;rethrows&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So are the types in Swift that implement &lt;code&gt;flatMap&lt;/code&gt; monads?&lt;/p&gt;

&lt;h3 id=&#34;not-quite-a-monad&#34;&gt;Not quite a monad&lt;/h3&gt;

&lt;p&gt;A true monad transformation requires that all the container types involved be the same kind - a restriction which is not enforced, here. This &lt;code&gt;flatMap&lt;/code&gt; function operates on any &lt;code&gt;Sequence&lt;/code&gt;, produces a second &lt;code&gt;Sequence&lt;/code&gt; kind that isn&amp;rsquo;t necessarily the same as the first and returns the concatenation as an &lt;code&gt;Array&lt;/code&gt;. This function is only a monad if both the &lt;code&gt;Sequence&lt;/code&gt; arguments are &lt;code&gt;Array&lt;/code&gt;. All other usage of this function results in not-a-monad.&lt;/p&gt;

&lt;p&gt;Does this matter?&lt;/p&gt;

&lt;p&gt;Pragmatically speaking, the definition of this function makes it a lot &lt;em&gt;easier&lt;/em&gt; to use a container type with this function, since the container type doesn&amp;rsquo;t need to offer its own construction and concatenation operators (&lt;code&gt;Array&lt;/code&gt; is used instead).&lt;/p&gt;

&lt;p&gt;On the negative side, there is the problem that you&amp;rsquo;d need a new overload of &lt;code&gt;flatMap&lt;/code&gt; if you wanted to return &lt;code&gt;Set&lt;/code&gt; or some other &lt;code&gt;Sequence&lt;/code&gt; or &lt;code&gt;Collection&lt;/code&gt;. This problem is mitigated by the fact that in these cases you can simply use the &lt;code&gt;.lazy.flatMap&lt;/code&gt; variant instead and concatenate the sequence to a &lt;code&gt;Set&lt;/code&gt; yourself.&lt;/p&gt;

&lt;p&gt;But it&amp;rsquo;s still not technically a monad.&lt;/p&gt;

&lt;h3 id=&#34;exactly-a-monad&#34;&gt;Exactly a monad&lt;/h3&gt;

&lt;p&gt;Swift does have a true one monad: &lt;code&gt;Optional&lt;/code&gt; and its implementation of &lt;code&gt;flatMap&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Optional&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;flatMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Wrapped&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?)&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;rethrows&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All containers are &lt;code&gt;Optional&lt;/code&gt;. Neat and tidy.&lt;/p&gt;

&lt;p&gt;Of course, we don&amp;rsquo;t always use this &lt;code&gt;flatMap&lt;/code&gt;. If we can, it&amp;rsquo;s better to use optional chaining:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flatMap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flatMap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;third&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;third&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Optional chaining is more syntactically efficient than &lt;code&gt;flatMap&lt;/code&gt; but it requires instance methods chained via dots. If you want to pass the previous result into a function as a parameter, you might need to use &lt;code&gt;flatMap&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;barely-a-monad-at-all&#34;&gt;Barely a monad at all&lt;/h3&gt;

&lt;p&gt;And then there&amp;rsquo;s this version:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Sequence&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// Returns an array containing the non-nil results of calling the given&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// transformation with each element of this sequence.&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;flatMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?)&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;rethrows&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the &lt;code&gt;flatMap&lt;/code&gt; I used in the previous article. Instead of &lt;code&gt;flatMap&lt;/code&gt; over &lt;code&gt;Sequence&lt;/code&gt; to &lt;code&gt;Sequence&lt;/code&gt; returning &lt;code&gt;Array&lt;/code&gt;, this version is &lt;code&gt;Sequence&lt;/code&gt; to &lt;code&gt;Optional&lt;/code&gt; returning &lt;code&gt;Array&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve had debates with people about whether this &lt;code&gt;flatMap&lt;/code&gt; should be renamed because it&amp;rsquo;s not monad-ish (monad-esque? monad-y?) enough to earn the name &lt;code&gt;flatMap&lt;/code&gt;. The Swift Evolution mailing list has seen similar petitions to rename this function based on its monadic violations.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m amused by this debate since an &lt;code&gt;Optional&lt;/code&gt; is effectively (if not semantically) a collection of one or zero instances, so this function is qualitatively equivalent to the &lt;code&gt;flatMap&lt;/code&gt; over &lt;code&gt;Sequence&lt;/code&gt; to &lt;code&gt;Sequence&lt;/code&gt; returning &lt;code&gt;Array&lt;/code&gt; version. Technically it is not possible for any usage of this function to be a monad but pragmatically, it serves exactly the same purpose as the previous &lt;code&gt;Sequence&lt;/code&gt; implemention.&lt;/p&gt;

&lt;p&gt;Yes, I realize that Haskell has &lt;code&gt;mapMaybe&lt;/code&gt; and Scala (the origin of the name &lt;code&gt;flatMap&lt;/code&gt;) requires chained &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; in this case – but my feeling is that flattening a sequence of optionals is still a flatten so the name still works.&lt;/p&gt;

&lt;h3 id=&#34;change-names-for-a-different-reason&#34;&gt;Change names for a different reason&lt;/h3&gt;

&lt;p&gt;For the &lt;a href=&#34;https://www.cocoawithlove.com/blog/statements-messages-reducers.html#where-do-we-go-from-here&#34;&gt;CwlSignal example in the previous article&lt;/a&gt;, I used a &lt;code&gt;Signal&lt;/code&gt; transformation named &lt;code&gt;filterMap&lt;/code&gt;. This transformation is equivalent to a &lt;code&gt;map&lt;/code&gt; that then omits &lt;code&gt;Optional&lt;/code&gt; results – so I&amp;rsquo;ve renamed this debated &lt;code&gt;flatMap&lt;/code&gt; in my own library.&lt;/p&gt;

&lt;p&gt;The name change had nothing to do with avoiding monadic confusion and everything to do with avoiding mismatched functions getting accidentally promoted to returning an &lt;code&gt;Optional&lt;/code&gt; result and satisfying the wrong overload to &lt;code&gt;flatMap&lt;/code&gt; instead of giving a compiler error.&lt;/p&gt;

&lt;p&gt;You can get the same kind of problem with the Swift standard library version of &lt;code&gt;flatMap&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flatMap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code compiles without problem but it&amp;rsquo;s clearly a mistake; either I intended to use a regular &lt;code&gt;map&lt;/code&gt; call instead of &lt;code&gt;flatMap&lt;/code&gt; or I should have performed logic in the closure that returned an &lt;code&gt;Optional&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t really a &lt;code&gt;flatMap&lt;/code&gt; problem as much as it&amp;rsquo;s a warning to be careful with overloads that differ only by an &lt;code&gt;Optional&lt;/code&gt; or &lt;code&gt;Optional&lt;/code&gt; returning parameter – it&amp;rsquo;s better to keep these overloads name-isolated to minimize bugs.&lt;/p&gt;

&lt;h2 id=&#34;monad-like-structures-in-swift&#34;&gt;Monad-like structures in Swift&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve already shown that optional chaining in Swift is equivalent to a &lt;code&gt;flatMap&lt;/code&gt; and therefore is a monadic operation:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flatMap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flatMap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;third&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;third&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;but it&amp;rsquo;s not the only construct that&amp;rsquo;s a little monadic.&lt;/p&gt;

&lt;p&gt;Swift&amp;rsquo;s error handling is also monad-like, from a certain perspective. Consider the following code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;someFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urlString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;makeUrlOrThrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fromString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urlString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;openFileOrThrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;readContentsOrThrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;this Swift error-handling based code is essentially the same as the following &lt;code&gt;flatMap&lt;/code&gt; structured code based around functions returning &lt;code&gt;Optionals&lt;/code&gt; that are &lt;code&gt;nil&lt;/code&gt; on failure:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;someFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urlString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;makeUrlOrNil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fromString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urlString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flatMap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;openFileOrNil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flatMap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;readContentsOrNil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, you can just unwrap an &lt;code&gt;Optional&lt;/code&gt;. Using Swift&amp;rsquo;s syntax for handling optionals, it doesn&amp;rsquo;t look much different and does exactly the same work, even though it&amp;rsquo;s not a monad at all:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;someFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urlString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;guard&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;makeUrlOrNil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fromString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urlString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;guard&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;openFileOrNil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;readContentsOrNil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nearly a monad, exactly a monad, not a monad at all; the different is not always significant and you should feel free to choose the syntax and approach you prefer.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Even though monads are essential in languages like Haskell, they&amp;rsquo;re just one of many processing tools in Swift.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t think there&amp;rsquo;s any real need to &lt;em&gt;try&lt;/em&gt; to be monadic in Swift. There are plenty of cases where layers of Error handling or &lt;code&gt;Optional&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; will naturally encourage you to concatenate results or filter out empty results but whether you choose to do this with &lt;code&gt;flatMap&lt;/code&gt; or &lt;code&gt;guard let&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt; loops is a matter of personal syntactic preference – you&amp;rsquo;ll get the same result in each case.&lt;/p&gt;

&lt;p&gt;Are the types that implement &lt;code&gt;flatMap&lt;/code&gt; in the Swift standard library monads? The &lt;code&gt;Optional&lt;/code&gt; version always is. The &lt;code&gt;Sequence&lt;/code&gt; version of &lt;code&gt;flatMap&lt;/code&gt; is monadic when used with &lt;code&gt;Array&lt;/code&gt; but otherwise is not. Monads have a requirement that the input, output and intermediate containers all be the same kind and Swift – without higher kinded types – couldn&amp;rsquo;t enforce this, even if it wanted.&lt;/p&gt;

&lt;p&gt;For the purpose of &lt;code&gt;flatMap&lt;/code&gt;, it appears that &lt;code&gt;Optional&lt;/code&gt; is treated as a collection and is permitted to be mixed and matched like any other collection. This bothers some people but personally, I think it makes sense. I&amp;rsquo;ve always been more concerned by the naming problem caused by the fact that &lt;code&gt;flatMap(x)&lt;/code&gt; needs to be read backwards. The function is really &lt;code&gt;flatten(map(x))&lt;/code&gt; – a map and then a flatten – which would be more correctly transcribed as &lt;code&gt;mapFlatten&lt;/code&gt;. Like monoids, English isn&amp;rsquo;t commutative.&lt;/p&gt;
&lt;br/&gt;Copyright Matt Gallagher, 2018. All rights reserved. Code samples may be use in accordance with the ISC-style license at https://www.cocoawithlove.com/about.html</description>
    </item>
    
    <item>
      <title>Statements, messages and reducers</title>
      <link>https://www.cocoawithlove.com/blog/statements-messages-reducers.html</link>
      <pubDate>Thu, 22 Jun 2017 00:14:22 +1000</pubDate>
      
      <guid>https://www.cocoawithlove.com/blog/statements-messages-reducers.html</guid>
      <description>

&lt;p&gt;Common advice when improving the design of a program is to break the programs into small isolated units of functionality so that we can consider the behavior within each component separately to the connections between components.&lt;/p&gt;

&lt;p&gt;If that&amp;rsquo;s the only advice you&amp;rsquo;re given though, it can be difficult to work out how to apply it in practice.&lt;/p&gt;

&lt;p&gt;In this article, I&amp;rsquo;ll show how this advice can be followed through the simple evolution of a piece of code, arriving at a pattern that is common in concurrent programming (but is useful across most stateful programs) where we build our program from three different tiers of computational unit: &amp;ldquo;statements&amp;rdquo;, &amp;ldquo;messages&amp;rdquo; and &amp;ldquo;reducers&amp;rdquo;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can &lt;a href=&#34;https://github.com/mattgallagher/CocoaWithLovePlaygrounds&#34;&gt;download this article as a Swift Playground&lt;/a&gt; from github.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;aim&#34;&gt;Aim&lt;/h2&gt;

&lt;p&gt;The purpose of this article is to show how to isolate state in your program. There are a number of reasons why we might want to do this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If containment is clean, the behavior at a single location is easier to understand&lt;/li&gt;
&lt;li&gt;If containment is clean, it is easier to model and understand connections between components.&lt;/li&gt;
&lt;li&gt;If state is accessed at a single location, it is easy to move that location inside another execution context (like a queue, thread or simply within a mutex) and make your program threadsafe and asynchronous.&lt;/li&gt;
&lt;li&gt;If state can only be accessed in restricted ways, we can more carefully manage dependencies and keep everything up-to-date when dependencies change&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;a-series-of-statements&#34;&gt;A series of statements&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;statement&lt;/strong&gt; is the standard computational unit in an imperative programming language, like Swift. Statements include assigment, functions and control flow and may include effects (changes in state).&lt;/p&gt;

&lt;p&gt;I know, I know, I&amp;rsquo;m explaining basic programming terminology to programmers; I&amp;rsquo;ll be brief.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a small program where the logic is built from statements:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;printCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;scalar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;UnicodeScalar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scalar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;�&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;grinning&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x1f600&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;printCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;grinning&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rollingOnTheFloorLaughing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x1f600&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;printCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rollingOnTheFloorLaughing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;notAValidScalar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x999999&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;printCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;notAValidScalar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;smirkingFace&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x1f60f&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;printCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;smirkingFace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;stuckOutTongueClosedEyes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x1f61d&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;printCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stuckOutTongueClosedEyes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will print each of the following on their own line: 😀 🤣 � 😏 😝&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The boxed question mark character is not a mistake, the code deliberately prints the Unicode replacement character (&lt;code&gt;0xfffd&lt;/code&gt;) on failure to convert to a &lt;code&gt;UnicodeScalar&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;controlling-our-program-through-messages&#34;&gt;Controlling our program through messages&lt;/h2&gt;

&lt;p&gt;The biggest problem with logic built purely from statements is that extending it with additional functionality is verbose. Looking for ways to eliminate verbosity naturally leads to code driven (at least in part) by data.&lt;/p&gt;

&lt;p&gt;For example, driving the previous example through data reduces the last 10 lines down to 4:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;codes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1f600&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x1f923&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x999999&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x1f60f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x1f61d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;codes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;printCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, this example is very simple and it might not be clear that it has really changed anything. We can increase the complexity of the example to make the difference clearer.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll modify our array to replace the basic &lt;code&gt;Int&lt;/code&gt; values with a type that needs a little more handling.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Instruction&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

   &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instrs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, instead of simply printing every &lt;code&gt;Int&lt;/code&gt; value received, our handling requires maintaining an internal &lt;code&gt;Int&lt;/code&gt; storage and different &lt;code&gt;Instruction&lt;/code&gt; values may &lt;code&gt;.set&lt;/code&gt; the storage, may &lt;code&gt;.increment&lt;/code&gt; the storage or may request that the storage be &lt;code&gt;.print&lt;/code&gt;ed.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at what code we might use to process the array of &lt;code&gt;Instruction&lt;/code&gt; objects:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Interpreter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;printCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;scalar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;UnicodeScalar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
         &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scalar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
         &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;�&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;kr&#34;&gt;mutating&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;handleInstruction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instruction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instruction&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;printCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;interpreter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Interpreter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;instructions&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1f600&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x323&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x999999&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1f60f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instructions&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;interpreter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;handleInstruction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code produces the same output as the previous example and uses a very similar &lt;code&gt;printCode&lt;/code&gt; function internally but it should be clear that the &lt;code&gt;Interpreter&lt;/code&gt; struct is running a little mini-program defined by the &lt;code&gt;instructions&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;It should now be much clearer that our program&amp;rsquo;s logic is composed of logic on two different tiers:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Swift statements in &lt;code&gt;handleInstruction&lt;/code&gt; and &lt;code&gt;printCode&lt;/code&gt; which interpret and execute each instruction&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Instructions.array&lt;/code&gt; which contains a sequence of messages that need to be interpreted&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Our second tier of computational unit is the &lt;strong&gt;message&lt;/strong&gt; and it is any data which can be fed to a component in a stream, where the structure of data in the stream itself determines the result.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Terminology note&lt;/strong&gt;: I&amp;rsquo;m calling these instructions &amp;ldquo;messages&amp;rdquo;, following common terminology in &lt;a href=&#34;https://en.wikipedia.org/wiki/Process_calculus&#34;&gt;process calculus&lt;/a&gt; and the &lt;a href=&#34;https://en.wikipedia.org/wiki/Actor_model&#34;&gt;actor model&lt;/a&gt;, but the term &amp;ldquo;commands&amp;rdquo; is also sometimes used. In some cases, these messages may also be treated as a complete &amp;ldquo;domain specific language&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;structuring-logic-through-component-connections&#34;&gt;Structuring logic through component connections&lt;/h2&gt;

&lt;p&gt;The biggest problem with the previous code is that its structure does not aesthetically reflect the structure of the computation; it&amp;rsquo;s difficult to see at a glance what direction the logic flows.&lt;/p&gt;

&lt;p&gt;We need to consider what the structure of the computation really is. We&amp;rsquo;re trying to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;take a sequence of instructions&lt;/li&gt;
&lt;li&gt;convert those instructions into sequence of effects on our internal state&lt;/li&gt;
&lt;li&gt;emit further messages to a third stage that can &lt;code&gt;print&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is possible to identify parts of the &lt;code&gt;Interpreter&lt;/code&gt; struct that perform these tasks but that struct is not aethetically organized to reflect these three steps.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s refactor our code to something that directly shows the connection.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1f600&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x323&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x999999&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1f60f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flatMap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;forEach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;scalar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;UnicodeScalar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scalar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;�&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once again, the code will print the same output as previous examples.&lt;/p&gt;

&lt;p&gt;We now have a three stage pipeline that directly reflects the 3 points above: a sequence of instructions, interpreting instructions and applying state effects, and the output phase.&lt;/p&gt;

&lt;h2 id=&#34;reducers&#34;&gt;Reducers&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s look in particular at the &lt;code&gt;flatMap&lt;/code&gt; stage in the middle of our pipeline. Why is it the most important?&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not because of the &lt;code&gt;flatMap&lt;/code&gt; function itself but because it is the only stage where I used a capturing closure. The &lt;code&gt;state&lt;/code&gt; variable is captured and referenced exclusively by this stage, making the &lt;code&gt;state&lt;/code&gt; value effectively a private variable of the &lt;code&gt;flatMap&lt;/code&gt; closure. The state is only ever indirectly accessed from outside the &lt;code&gt;flatMap&lt;/code&gt; stage – it is set by providing an input &lt;code&gt;Instruction&lt;/code&gt; and it is accessed via &lt;code&gt;Int&lt;/code&gt; values that the &lt;code&gt;flatMap&lt;/code&gt; stage chooses to emit.&lt;/p&gt;

&lt;p&gt;We can model this stage like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.cocoawithlove.com/assets/blog/reducer.svg&#34; alt=&#34;Figure 1: a diagram of a reducer, its state and messages&#34; /&gt;&lt;/p&gt;

&lt;figcaption&gt;A diagram of stage in a pipeline as a &#34;reducer&#34;&lt;/figcaption&gt;

&lt;p&gt;Each of the &lt;code&gt;a&lt;/code&gt; values in this diagram are the &lt;code&gt;Instruction&lt;/code&gt; values. The &lt;code&gt;x&lt;/code&gt; values are the &lt;code&gt;state&lt;/code&gt; and the &lt;code&gt;b&lt;/code&gt; values are the &lt;code&gt;Int?&lt;/code&gt; emitted.&lt;/p&gt;

&lt;p&gt;This is called a &lt;strong&gt;reducer&lt;/strong&gt; and it is the third tier of computational unit that I want to discuss. A reducer is an entity with identity (a reference type in Swift) and internal state that is accessed purely by incoming and outgoing messages.&lt;/p&gt;

&lt;p&gt;When I say that reducers are the third tier of computation unit that I want to discuss, I&amp;rsquo;m excluding consideration of the contents of the reducer (which are typical Swift statements effecting the encapsulated state) and instead considering the reducer as a single black box unit defined by its connections to other units and suggesting that these boxes are how we can lay out higher level logic.&lt;/p&gt;

&lt;p&gt;Another way of explaining this is while statements perform logic &lt;em&gt;within&lt;/em&gt; an execution context, reducers form logic by spanning between execution contexts.&lt;/p&gt;

&lt;p&gt;I used a capturing closure to ad hoc a reducer from a &lt;code&gt;flatMap&lt;/code&gt; function and an &lt;code&gt;Int&lt;/code&gt; variable but most reducers are &lt;code&gt;class&lt;/code&gt; instances that maintain their state a little more tightly and assist with integration into a larger graph.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m using the term &amp;ldquo;reducer&amp;rdquo; to describe this type of construct. My definition is more accurately an Agent or Actor with &lt;a href=&#34;https://en.wikipedia.org/wiki/Operational_semantics#Reduction_semantics&#34;&gt;reduction semantics&lt;/a&gt;. In a weird terminology twist, &amp;ldquo;reducers&amp;rdquo; are also called &amp;ldquo;accumulators&amp;rdquo;, despite those words being near opposites. It&amp;rsquo;s a matter of perspective: a &amp;ldquo;reducer&amp;rdquo; reduces the incoming stream of messages down to a single state value; while an &amp;ldquo;accumulator&amp;rdquo; accumulates new information in its state over time by incorporating each incoming message as it arrives.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;where-do-we-go-from-here&#34;&gt;Where do we go from here?&lt;/h2&gt;

&lt;p&gt;We can replace the reducer abstractions with very different kinds of machinery.&lt;/p&gt;

&lt;p&gt;We could migrate our previous code, which operates on a Swift &lt;code&gt;Array&lt;/code&gt; of values to the CwlSignal reactive programming framework with effort that is barely more than drag and drop. This would give us access to asynchronous capabilities or true communication channels between different parts of our program.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how it looks:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;Signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1f600&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x323&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x999999&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1f60f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filterMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;inout&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;subscribeValuesAndKeepAlive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;scalar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;UnicodeScalar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scalar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;�&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;filterMap&lt;/code&gt; function here is more ideally suited as a reducer since it offers truly private internal state as part of the API – no more captured variables required to establish private state - otherwise it is semantically equivalent to the previous &lt;code&gt;flatMap&lt;/code&gt; as it maps over the sequences of values in the signal and filters out optionals.&lt;/p&gt;

&lt;p&gt;This simple change between abstractions is possible because the contents of the reducer are dependent on the messages, not the reducer machinery itself.&lt;/p&gt;

&lt;p&gt;As for any additional tiers of computational unit beyond reducers? I don&amp;rsquo;t know, I haven&amp;rsquo;t encountered any. We&amp;rsquo;ve addressed the issue of state encapsulation so any additional tier would be to address a new issue. But if artificial neural networks can have &amp;ldquo;Deep Learning&amp;rdquo;, then why can&amp;rsquo;t programming have &amp;ldquo;Deep Semantics&amp;rdquo;? Clearly, it&amp;rsquo;s the future 😉.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;You can &lt;a href=&#34;https://github.com/mattgallagher/CocoaWithLovePlaygrounds&#34;&gt;download this article as a Swift Playground&lt;/a&gt; from github.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The lesson here is that the most natural way to break a program into small, isolated components is to organize your program in three different tiers:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;stateful code isolated in reducers with access limited to messages in and messages out&lt;/li&gt;
&lt;li&gt;messages which act to program reducers into a given state&lt;/li&gt;
&lt;li&gt;graph structure formed by reducers lays out the higher level logic of the program&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;None of this is new advice; this all originates in concurrent computation theory from mid-1970s and the advice hasn&amp;rsquo;t changed substantially since the early 1990s when &amp;ldquo;reduction semantics&amp;rdquo; were formalized.&lt;/p&gt;

&lt;p&gt;Of course, that doesn&amp;rsquo;t mean that people always follow good advice. Object-oriented programming was the hammer that people used to try and solve every programming problem though the 1990s and early 2000s and while you can build a reducer from an object, that doesn&amp;rsquo;t mean that all objects are reducers. Unrestricted interfaces on objects can make state, dependencies and interface coupling into a maintenance nightmare.&lt;/p&gt;

&lt;p&gt;However, it is straightforward to model your objects as reducers by simplifying the public interface down to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a constructor&lt;/li&gt;
&lt;li&gt;a single function for messages-in&lt;/li&gt;
&lt;li&gt;a way to subscribe or otherwise connect messages-out&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s a situation where &lt;em&gt;limiting&lt;/em&gt; the functionality of an interface will greatly improve the ability to maintain and iterate the design.&lt;/p&gt;

&lt;h3 id=&#34;looking-forward&#34;&gt;Looking forward&amp;hellip;&lt;/h3&gt;

&lt;p&gt;In the example in the &lt;a href=&#34;#structuring-logic-through-component-connections&#34;&gt;Structuring logic through component connections&lt;/a&gt; section, I used the controversial definition of &lt;code&gt;flatMap&lt;/code&gt; (the one that is never a monad). In my next article, I&amp;rsquo;m going to talk about why monads are considered a fundamental unit of computation to many functional programmers yet a strict implementation in imperative programming is sometimes less useful than transforms which aren&amp;rsquo;t quite monads.&lt;/p&gt;
&lt;br/&gt;Copyright Matt Gallagher, 2018. All rights reserved. Code samples may be use in accordance with the ISC-style license at https://www.cocoawithlove.com/about.html</description>
    </item>
    
    <item>
      <title>Looking at Model-View-Controller in Cocoa</title>
      <link>https://www.cocoawithlove.com/blog/mvc-and-cocoa.html</link>
      <pubDate>Tue, 28 Feb 2017 19:49:56 +1100</pubDate>
      
      <guid>https://www.cocoawithlove.com/blog/mvc-and-cocoa.html</guid>
      <description>

&lt;p&gt;According to Apple&amp;rsquo;s documentation, the standard pattern for Cocoa applications is called Model-View-Controller. Despite the name, this pattern is quite unlike the original definition of Model-View-Controller in Smalltalk-80. Cocoa&amp;rsquo;s application design pattern actually shares more in common with ideas developed at Taligent (an Apple co-developed project from the 1990s) than with the original Smalltalk origin of the term.&lt;/p&gt;

&lt;p&gt;In this article, I&amp;rsquo;ll look at a little theory and history behind the primary application design pattern used in Cocoa. I&amp;rsquo;ll discuss the key shortcoming of Cocoa&amp;rsquo;s Model-View-Controller approach, Apple&amp;rsquo;s aborted efforts to address this shortcoming and wonder from where the next major improvements will come.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;smalltalk-80&#34;&gt;Smalltalk-80&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Probably the widest quoted pattern in UI development is Model View Controller (MVC) - it&amp;rsquo;s also the most misquoted. I&amp;rsquo;ve lost count of the times I&amp;rsquo;ve seen something described as MVC which turned out to be nothing like it. &lt;strong&gt;- Martin Fowler, &lt;a href=&#34;https://www.martinfowler.com/eaaDev/uiArchs.html&#34;&gt;GUI Architectures&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I want to quickly address what Martin Fowler means in the above quote since, by the definition Fowler uses – the definition originally used by Smalltalk-80 – the approach commonly used to develop Cocoa apps is not Model-View-Controller.&lt;/p&gt;

&lt;p&gt;In Smalltalk-80, interactive views were split into two completely separate objects: the View object and the Controller object. The View object performed display but any click or interaction wasn&amp;rsquo;t handled by the View object and was instead dispatched by the partner Controller object. The important point to understand is that the Controller didn&amp;rsquo;t load, setup or manage the View, nor did one Controller handle actions for multiple Views; in the original definition of Model-View-Controller, the View and Controller were simply the action and display aspects of a single control on screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.cocoawithlove.com/assets/blog/smalltalk_mvc.svg&#34; alt=&#34;Smalltalk&#39;s version of Model-View-Controller&#34; /&gt;&lt;/p&gt;

&lt;figcaption&gt;Smalltalk-80&#39;s version of Model-View-Controller&lt;/a&gt;&lt;/figcaption&gt;

&lt;p&gt;The diagram of Smalltalk-80&amp;rsquo;s Model-View-Controller shows the &lt;em&gt;model&lt;/em&gt; as the central component of the object graph, with communication primarily occurring between the model and the view or controller directly.&lt;/p&gt;

&lt;p&gt;This precise pattern reflects how Smalltalk-80 processed user-input and there&amp;rsquo;s little need to use this precise pattern in modern programs. In that sense, either no modern framework is really Model-View-Controller, or the definition of the term has changed to mean something else.&lt;/p&gt;

&lt;h2 id=&#34;cocoa-appkit-uikit&#34;&gt;Cocoa (AppKit/UIKit)&lt;/h2&gt;

&lt;p&gt;When Cocoa says Model-View-Controller it&amp;rsquo;s mostly trying to evoke the notion of &lt;a href=&#34;https://en.wikipedia.org/wiki/Separation_of_presentation_and_content&#34;&gt;Separated Presentation and Content&lt;/a&gt; in application design (the idea that the model and view should have a decoupled design and be loosely linked at construction). To be fair, it&amp;rsquo;s not just Cocoa that uses Model-View-Controller in this way: &lt;em&gt;most&lt;/em&gt; modern uses of the term are really intended to convey Separated Presentation rather than the original Smalltalk-80 definition.&lt;/p&gt;

&lt;p&gt;Looking at the precise pattern Cocoa actually uses, Apple&amp;rsquo;s Cocoa reference guides use a definition of &lt;a href=&#34;https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html&#34;&gt;Model-View-Controller&lt;/a&gt; that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.cocoawithlove.com/assets/blog/cocoa_mvc.svg&#34; alt=&#34;Cocoa&#39;s version of Model-View-Controller&#34; /&gt;&lt;/p&gt;

&lt;figcaption&gt;Cocoa&#39;s version of Model-View-Controller&lt;/a&gt;&lt;/figcaption&gt;

&lt;p&gt;The important point to note is that the controller is the center of the object graph with most communication passing &lt;em&gt;via&lt;/em&gt; the controller – distinct from the Smalltalk-80 version where the &lt;em&gt;model&lt;/em&gt; was the center of the graph.&lt;/p&gt;

&lt;p&gt;Cocoa doesn&amp;rsquo;t &lt;em&gt;force&lt;/em&gt; this pattern on apps but it is strongly implied by all application templates. Loading from NIB files strongly encourages the use of &lt;code&gt;NSWindowController&lt;/code&gt;/&lt;code&gt;UIViewController&lt;/code&gt;. The delegate requirements of &lt;code&gt;NSTableView&lt;/code&gt;/&lt;code&gt;UITableView&lt;/code&gt; and related classes strongly imply a coordinator class that understands responsibilities of the entire presentation. Classes like &lt;code&gt;UITabBarController&lt;/code&gt; and &lt;code&gt;UINavigationController&lt;/code&gt; explicitly require instances of &lt;code&gt;UIViewController&lt;/code&gt; to coordinate views as they are swapped in and out.&lt;/p&gt;

&lt;h2 id=&#34;taligent&#34;&gt;Taligent&lt;/h2&gt;

&lt;p&gt;In academic discussions, the pattern that Cocoa calls Model-View-Controller is usually called &lt;a href=&#34;https://en.wikipedia.org/wiki/Model–view–presenter&#34;&gt;Model-View-Presenter&lt;/a&gt;. The two are identical except that what Cocoa calls Controllers are instead called Presenters. The name &amp;ldquo;Presenter&amp;rdquo; reflects their role setting up the scene and coordinating the action. In some cases, the Presenter object may be called a &amp;ldquo;Supervising Controller&amp;rdquo; – you can understand why &amp;ldquo;Model-View-Supervising Controller&amp;rdquo; might get simplified back down to Model-View-Controller again.&lt;/p&gt;

&lt;p&gt;The term Model-View-Presenter originated in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Taligent&#34;&gt;Taligent&lt;/a&gt; project. The most commonly cited paper is &lt;a href=&#34;http://www.wildcrest.com/Potel/Portfolio/mvp.pdf&#34;&gt;&amp;ldquo;MVP: Model-View-Presenter, The Taligent Programming Model for C++ and Java&amp;rdquo;&lt;/a&gt; from 1997 but Taligent&amp;rsquo;s classes for implementing this model were &lt;a href=&#34;https://root.cern.ch/TaligentDocs/TaligentOnline/DocumentRoot/1.0/Docs/classes/TGUIPresenter.html&#34;&gt;documented at least as early as 1995&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;aside&#34;&gt;&lt;a href=&#34;https://www.wired.com/1993/02/taligent/&#34;&gt;This Wired article from 1993&lt;/a&gt; gives an interesting insight into Taligent and the apparent bloat and infighting that doomed it.&lt;/div&gt;

&lt;p&gt;Taligent was a company originally started within Apple as a project code-named &amp;ldquo;Pink&amp;rdquo; (after the color of index cards used for its ideas) to provide an operating system replacement for &lt;a href=&#34;https://en.wikipedia.org/wiki/System_7&#34;&gt;System 7&lt;/a&gt; (which was mapped out on &amp;ldquo;Blue&amp;rdquo; index cards). The project had a series of famous development and management problems during which Apple withdrew and focussed on the equally doomed &lt;a href=&#34;https://en.wikipedia.org/wiki/Copland_(operating_system)&#34;&gt;Copland&lt;/a&gt; project. Taligent was continued at IBM where it was released as a series of application frameworks named CommonPoint, rather than an operating system, before being shut down in 1998.&lt;/p&gt;

&lt;div class=&#34;aside&#34;&gt;The &lt;a href=&#34;https://root.cern.ch/TaligentDocs/TaligentOnline/DocumentRoot/1.0/Docs/books/index.html&#34;&gt;Taligent documentation&lt;/a&gt;, from 1995, is fascinating to read. The &lt;a href=&#34;https://root.cern.ch/TaligentDocs/TaligentOnline/DocumentRoot/1.0/Docs/books/WM/WM_3.html&#34;&gt;Guide to Designing Programs&lt;/a&gt; discusses many ideas relevant to application design, 22 years later. However, the &lt;a href=&#34;https://root.cern.ch/TaligentDocs/TaligentOnline/DocumentRoot/1.0/Docs/books/PF/PF_1.html&#34;&gt;Programming with the Presentation Framework tutorial&lt;/a&gt; is horrifically bad: baffling, over-technical and unapproachable.&lt;/div&gt;

&lt;p&gt;While NeXTStep predates Taligent, the controller classes in AppKit – which are now &lt;em&gt;defining&lt;/em&gt; aspect of AppKit&amp;rsquo;s Model-View-Controller design pattern – did not appear until NeXTStep 4 in 1996 (a major redesign of NeXTStep and the first NeXTStep version to incorporate the &lt;code&gt;NS&lt;/code&gt; prefix that remains in macOS until this day). I don&amp;rsquo;t know that NeXTStep borrowed directly from Taligent – it&amp;rsquo;s possible this is simply a case of convergent evolution or multiple companies hiring from the same talent pool. All I can really tell from my 2017 vantage point is that Taligent published first.&lt;/p&gt;

&lt;h2 id=&#34;the-controller-problem&#34;&gt;The Controller Problem&lt;/h2&gt;

&lt;p&gt;Understanding Cocoa&amp;rsquo;s Model-View-Controller as a variation on the Model-View-Presenter pattern – where the Presenter or Supervising Controller is responsible for the lifecycle, action and change propagations of all of the views under it in the scene – is important since it leads to the largest problem in the pattern: the &amp;ldquo;Controller Problem&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The Controller Problem, also called &amp;ldquo;Massive/Huge/Giant View Controllers&amp;rdquo;, is the problem where controllers in Cocoa have a horrible tendency to grow large by taking on a number of separate responsibilities that are primarily related by co-location in the view – not necessarily by any functional or data dependencies. Most non-trivial projects have a handful of controllers in the 2000 lines range or larger.&lt;/p&gt;

&lt;p&gt;Let me be clear: it&amp;rsquo;s not the size alone that&amp;rsquo;s the problem here but the &lt;em&gt;way&lt;/em&gt; that controllers grow this big that&amp;rsquo;s concerning: &lt;strong&gt;controllers in Cocoa are an aggregation of responsibilities that may or may not be related&lt;/strong&gt;. A view controller may be responsible for a half-dozen or more views and each one may have construction, configuration, data display, data updating, layout, animation and action and other state maintenance responsibilities that end up in the parent view controller.&lt;/p&gt;

&lt;p&gt;That mix of independent and interdependent responsibilities at substantial scale is a maintenance nightmare. The large quantity of code blobs makes actual dependencies and interrelated functionality difficult to find. Controllers are always difficult to test (due to significant app and bundle state dependencies making isolation difficult) but the problems of scale and semi-dependence compound to make everything worse.&lt;/p&gt;

&lt;p&gt;The only solution to the Controller Problem is to continuously refactor large view controllers into multiple smaller, simpler controllers. This may involve redesigning or rethinking data structures to disentangle and eliminate dependencies that pass through the view controller and design sensible approaches to have multiple view controllers communicate. It can be done but it can involve lots of work, has all the normal risks of introducing bugs with each change, remains difficult to test (as with everything view controller related), yet despite all this, offers zero functionality gain for the end user.&lt;/p&gt;

&lt;h2 id=&#34;bindings&#34;&gt;Bindings&lt;/h2&gt;

&lt;p&gt;Apple have known about the Controller Problem for some time, as evidenced by their Mac OS X 10.3 introduction of Cocoa Bindings.&lt;/p&gt;

&lt;div class=&#34;aside&#34;&gt;If you&#39;d like to learn more about Cocoa Bindings, read Apple&#39;s page &#34;&lt;a href=&#34;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CocoaBindings/Concepts/WhatAreBindings.html&#34;&gt;What are Cocoa Bindings?&lt;/a&gt;&#34;.&lt;/div&gt;

&lt;p&gt;A binding is a runtime constructed path between two components. These components are usually a source of data and an observer of that data. The binding allows these components to communicate changes without needing any explicit code path. Instead, the path between the two components is defined in data – for Cocoa bindings, this is called a &amp;ldquo;key-path&amp;rdquo;. By specifying a key-path through the controller all the way to the model properties that govern the views&amp;rsquo; state, bindings can ameliorate the Controller Problem by dramatically reducing – or even eliminating – code paths through the controller.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.cocoawithlove.com/assets/blog/cocoa_bindings_mvc.svg&#34; alt=&#34;Cocoa&#39;s Model-View-Controller with Bindings&#34; /&gt;&lt;/p&gt;

&lt;figcaption&gt;Code paths through the Controller are replaced by Bindings&lt;/a&gt;&lt;/figcaption&gt;

&lt;p&gt;More than a decade after their introduction, Cocoa Bindings remain all-but-forgotten. You can still use bindings in AppKit (they were never deprecated) but they were never introduced to UIKit, reflecting an impression that they never quite succeeded in their aim of making view programming easier.&lt;/p&gt;

&lt;p&gt;I think Bindings attacked a problem that needed attacking and in some cases could work really well – especially when combined with &lt;code&gt;NSArrayController&lt;/code&gt; to drive an &lt;code&gt;NSTableView&lt;/code&gt; – but I can understand why they didn&amp;rsquo;t take over Mac programming.&lt;/p&gt;

&lt;p&gt;The key advantage of Cocoa Bindings (less code in your view controller) was achieved by a large amount of configuration in Interface Builder inspector panels. This can be confusing if you&amp;rsquo;re looking for functionality in your code (it&amp;rsquo;s not &lt;em&gt;in&lt;/em&gt; your code), can be difficult to search (although Xcode&amp;rsquo;s project-wide searching eventually gained the ability to search XIB files), difficult to debug (model data changes without the stack trace passing through your code), is very difficult to teach to newcomers who are unlikely to want to search through the inspector panels, can be even more cryptic than staring at code (you can&amp;rsquo;t add comments or restructure a XIB file) and can fall victim to annoying Interface Builder issues like localization mixups and version control merge issues.&lt;/p&gt;

&lt;p&gt;In my opinion, the critical failing for Cocoa Bindings remains the difficulty in adding custom transformations and custom properties. These could both be done but the work involved in registering transformers and exposing bindings dictionaries made a tiresome affair. It always just seemed easier to pass the data through the view controller without bindings. This meant that Bindings tended to help the &lt;em&gt;simplest&lt;/em&gt; problems (that didn&amp;rsquo;t need much help) but didn&amp;rsquo;t have much impact on the harder problems.&lt;/p&gt;

&lt;h2 id=&#34;something-new&#34;&gt;Something new?&lt;/h2&gt;

&lt;p&gt;Since Cocoa Bindings in Mac OS X 10.3, there haven&amp;rsquo;t really been &lt;em&gt;any&lt;/em&gt; clear attempts by Apple to alter the design pattern used for Cocoa apps.&lt;/p&gt;

&lt;p&gt;We did get Storyboards in iOS 5 and Mac OS X 10.10 but storyboards aren&amp;rsquo;t really an attempt to &lt;em&gt;change&lt;/em&gt; the design pattern as much as they are an attempt to facilitate the existing design pattern. Storyboards re-inforce the Model-View-Presenter design pattern by encouraging use of &lt;code&gt;NS&lt;/code&gt;/&lt;code&gt;UIViewController&lt;/code&gt;. Storyboards do help by encouraging smaller more focussed view controllers and very slightly reducing the &amp;ldquo;Presentation&amp;rdquo; burden of setup and transition. However, since they are configured in Interface Builder, they do exhibit a number of the issues that affected Cocoa Bindings.&lt;/p&gt;

&lt;p&gt;For those of us hoping for something more ambitious in application design patterns, Storyboards don&amp;rsquo;t offer much that&amp;rsquo;s new.&lt;/p&gt;

&lt;p&gt;New ideas in application design do exist. Outside Apple, we have options like &lt;a href=&#34;https://www.cocoawithlove.com/blog/reactive-programming-what-and-why.html&#34;&gt;Reactive Programming&lt;/a&gt; (which can fulfill most the role of Bindings if we choose), &lt;a href=&#34;https://www.objc.io/issues/13-architecture/mvvm/&#34;&gt;Model-View-ViewModel&lt;/a&gt; (which reduces the work for a controller by bringing a transformed section of the model closer to the view), &lt;a href=&#34;http://reswift.github.io/ReSwift/master/&#34;&gt;unidirectional dataflow&lt;/a&gt; (which reduces the need for binding by forcing data changes through a single reducer and broadcasting all data changes to the whole app); all of which are popular within different circles.&lt;/p&gt;

&lt;p&gt;There are also frameworks for doing things radically differently, like &lt;a href=&#34;https://facebook.github.io/react-native/&#34;&gt;React Native&lt;/a&gt; or &lt;a href=&#34;https://github.com/salutis/swift-elm&#34;&gt;Swift-Elm&lt;/a&gt;, although sacrificing Swift or Cocoa entirely comes with a significant set of drawbacks.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s unclear if any of these will have an effect on official Cocoa app development. Swift proved that Apple are willing to dramatically shake things up occasionally and there&amp;rsquo;s an argument that Swift has increased the desire for a design pattern or view framework that takes advantage of aspects of the Swift language. However, it will likely be some time before Apple are willing to introduce a major Swift-only framework.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If we take NeXTStep 4 as the origin date for Cocoa&amp;rsquo;s current Model-View-Controller pattern then it is 20 years old this year. It&amp;rsquo;s not &lt;em&gt;broken&lt;/em&gt; but it has its drawbacks and it doesn&amp;rsquo;t feel as exciting or efficient as it once did.&lt;/p&gt;

&lt;p&gt;Apple made its only significant effort to improve the design pattern, Cocoa Bindings, relatively early. Its reception was mixed and it has not been carried forward onto Apple&amp;rsquo;s newer platforms.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t have any information about internal efforts by the AppKit or UIKit teams but it&amp;rsquo;s not immediately apparent that Apple are looking to make any dramatic changes any time soon. There are a number of possible design patterns employed in third-party frameworks which aim to improve the overall application design pattern in Cocoa but there doesn&amp;rsquo;t appear to be consensus that any one of these is necessarily the way forward. I do think these efforts reflect an interest in &lt;em&gt;some&lt;/em&gt; kind of improvement.&lt;/p&gt;
&lt;br/&gt;Copyright Matt Gallagher, 2018. All rights reserved. Code samples may be use in accordance with the ISC-style license at https://www.cocoawithlove.com/about.html</description>
    </item>
    
  </channel>
</rss>
